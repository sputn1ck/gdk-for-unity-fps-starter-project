// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gameserver.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bbh {

  /// <summary>Holder for reflection information generated from gameserver.proto</summary>
  public static partial class GameserverReflection {

    #region Descriptor
    /// <summary>File descriptor for gameserver.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameserverReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBnYW1lc2VydmVyLnByb3RvEgNiYmgikgEKEkV2ZW50U3RyZWFtUmVxdWVz",
            "dBIeCgRraWxsGAEgASgLMg4uYmJoLktpbGxFdmVudEgAEiYKCGVhcm5pbmdz",
            "GAIgASgLMhIuYmJoLkVhcm5pbmdzRXZlbnRIABIrCgtwbGF5ZXJfaW5mbxgD",
            "IAEoCzIULmJiaC5QbGF5ZXJJbmZvRXZlbnRIAEIHCgVldmVudCIVChNFdmVu",
            "dFN0cmVhbVJlc3BvbnNlIjoKCUtpbGxFdmVudBIOCgZraWxsZXIYASABKAkS",
            "DgoGdmljdGltGAIgASgJEg0KBWNhdXNlGAMgASgJIioKDUVhcm5pbmdzRXZl",
            "bnQSDAoEdXNlchgBIAEoCRILCgNhbXQYAiABKAMixgEKD1BsYXllckluZm9F",
            "dmVudBIMCgR1c2VyGAEgASgJEjIKCmV2ZW50X3R5cGUYAiABKA4yHi5iYmgu",
            "UGxheWVySW5mb0V2ZW50LkV2ZW50VHlwZRIWCg5jdXJyZW50X2JvdW50eRgD",
            "IAEoAxIVCg1jdXJyZW50X2tpbGxzGAQgASgFEhYKDmN1cnJlbnRfZGVhdGhz",
            "GAUgASgFIioKCUV2ZW50VHlwZRINCglIRUFSVEJFQVQQABIOCgpESVNDT05O",
            "RUNUEAEyUQoLR2FtZVNlcnZpY2USQgoLRXZlbnRTdHJlYW0SFy5iYmguRXZl",
            "bnRTdHJlYW1SZXF1ZXN0GhguYmJoLkV2ZW50U3RyZWFtUmVzcG9uc2UoAWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bbh.EventStreamRequest), global::Bbh.EventStreamRequest.Parser, new[]{ "Kill", "Earnings", "PlayerInfo" }, new[]{ "Event" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bbh.EventStreamResponse), global::Bbh.EventStreamResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bbh.KillEvent), global::Bbh.KillEvent.Parser, new[]{ "Killer", "Victim", "Cause" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bbh.EarningsEvent), global::Bbh.EarningsEvent.Parser, new[]{ "User", "Amt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bbh.PlayerInfoEvent), global::Bbh.PlayerInfoEvent.Parser, new[]{ "User", "EventType", "CurrentBounty", "CurrentKills", "CurrentDeaths" }, null, new[]{ typeof(global::Bbh.PlayerInfoEvent.Types.EventType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class EventStreamRequest : pb::IMessage<EventStreamRequest> {
    private static readonly pb::MessageParser<EventStreamRequest> _parser = new pb::MessageParser<EventStreamRequest>(() => new EventStreamRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventStreamRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bbh.GameserverReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventStreamRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventStreamRequest(EventStreamRequest other) : this() {
      switch (other.EventCase) {
        case EventOneofCase.Kill:
          Kill = other.Kill.Clone();
          break;
        case EventOneofCase.Earnings:
          Earnings = other.Earnings.Clone();
          break;
        case EventOneofCase.PlayerInfo:
          PlayerInfo = other.PlayerInfo.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventStreamRequest Clone() {
      return new EventStreamRequest(this);
    }

    /// <summary>Field number for the "kill" field.</summary>
    public const int KillFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bbh.KillEvent Kill {
      get { return eventCase_ == EventOneofCase.Kill ? (global::Bbh.KillEvent) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Kill;
      }
    }

    /// <summary>Field number for the "earnings" field.</summary>
    public const int EarningsFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bbh.EarningsEvent Earnings {
      get { return eventCase_ == EventOneofCase.Earnings ? (global::Bbh.EarningsEvent) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Earnings;
      }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bbh.PlayerInfoEvent PlayerInfo {
      get { return eventCase_ == EventOneofCase.PlayerInfo ? (global::Bbh.PlayerInfoEvent) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.PlayerInfo;
      }
    }

    private object event_;
    /// <summary>Enum of possible cases for the "event" oneof.</summary>
    public enum EventOneofCase {
      None = 0,
      Kill = 1,
      Earnings = 2,
      PlayerInfo = 3,
    }
    private EventOneofCase eventCase_ = EventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventOneofCase EventCase {
      get { return eventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvent() {
      eventCase_ = EventOneofCase.None;
      event_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventStreamRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventStreamRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Kill, other.Kill)) return false;
      if (!object.Equals(Earnings, other.Earnings)) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (EventCase != other.EventCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventCase_ == EventOneofCase.Kill) hash ^= Kill.GetHashCode();
      if (eventCase_ == EventOneofCase.Earnings) hash ^= Earnings.GetHashCode();
      if (eventCase_ == EventOneofCase.PlayerInfo) hash ^= PlayerInfo.GetHashCode();
      hash ^= (int) eventCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventCase_ == EventOneofCase.Kill) {
        output.WriteRawTag(10);
        output.WriteMessage(Kill);
      }
      if (eventCase_ == EventOneofCase.Earnings) {
        output.WriteRawTag(18);
        output.WriteMessage(Earnings);
      }
      if (eventCase_ == EventOneofCase.PlayerInfo) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventCase_ == EventOneofCase.Kill) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kill);
      }
      if (eventCase_ == EventOneofCase.Earnings) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Earnings);
      }
      if (eventCase_ == EventOneofCase.PlayerInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventStreamRequest other) {
      if (other == null) {
        return;
      }
      switch (other.EventCase) {
        case EventOneofCase.Kill:
          if (Kill == null) {
            Kill = new global::Bbh.KillEvent();
          }
          Kill.MergeFrom(other.Kill);
          break;
        case EventOneofCase.Earnings:
          if (Earnings == null) {
            Earnings = new global::Bbh.EarningsEvent();
          }
          Earnings.MergeFrom(other.Earnings);
          break;
        case EventOneofCase.PlayerInfo:
          if (PlayerInfo == null) {
            PlayerInfo = new global::Bbh.PlayerInfoEvent();
          }
          PlayerInfo.MergeFrom(other.PlayerInfo);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Bbh.KillEvent subBuilder = new global::Bbh.KillEvent();
            if (eventCase_ == EventOneofCase.Kill) {
              subBuilder.MergeFrom(Kill);
            }
            input.ReadMessage(subBuilder);
            Kill = subBuilder;
            break;
          }
          case 18: {
            global::Bbh.EarningsEvent subBuilder = new global::Bbh.EarningsEvent();
            if (eventCase_ == EventOneofCase.Earnings) {
              subBuilder.MergeFrom(Earnings);
            }
            input.ReadMessage(subBuilder);
            Earnings = subBuilder;
            break;
          }
          case 26: {
            global::Bbh.PlayerInfoEvent subBuilder = new global::Bbh.PlayerInfoEvent();
            if (eventCase_ == EventOneofCase.PlayerInfo) {
              subBuilder.MergeFrom(PlayerInfo);
            }
            input.ReadMessage(subBuilder);
            PlayerInfo = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventStreamResponse : pb::IMessage<EventStreamResponse> {
    private static readonly pb::MessageParser<EventStreamResponse> _parser = new pb::MessageParser<EventStreamResponse>(() => new EventStreamResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventStreamResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bbh.GameserverReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventStreamResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventStreamResponse(EventStreamResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventStreamResponse Clone() {
      return new EventStreamResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventStreamResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventStreamResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventStreamResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class KillEvent : pb::IMessage<KillEvent> {
    private static readonly pb::MessageParser<KillEvent> _parser = new pb::MessageParser<KillEvent>(() => new KillEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KillEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bbh.GameserverReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KillEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KillEvent(KillEvent other) : this() {
      killer_ = other.killer_;
      victim_ = other.victim_;
      cause_ = other.cause_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KillEvent Clone() {
      return new KillEvent(this);
    }

    /// <summary>Field number for the "killer" field.</summary>
    public const int KillerFieldNumber = 1;
    private string killer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Killer {
      get { return killer_; }
      set {
        killer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "victim" field.</summary>
    public const int VictimFieldNumber = 2;
    private string victim_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Victim {
      get { return victim_; }
      set {
        victim_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cause" field.</summary>
    public const int CauseFieldNumber = 3;
    private string cause_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cause {
      get { return cause_; }
      set {
        cause_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KillEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KillEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Killer != other.Killer) return false;
      if (Victim != other.Victim) return false;
      if (Cause != other.Cause) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Killer.Length != 0) hash ^= Killer.GetHashCode();
      if (Victim.Length != 0) hash ^= Victim.GetHashCode();
      if (Cause.Length != 0) hash ^= Cause.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Killer.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Killer);
      }
      if (Victim.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Victim);
      }
      if (Cause.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Cause);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Killer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Killer);
      }
      if (Victim.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Victim);
      }
      if (Cause.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cause);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KillEvent other) {
      if (other == null) {
        return;
      }
      if (other.Killer.Length != 0) {
        Killer = other.Killer;
      }
      if (other.Victim.Length != 0) {
        Victim = other.Victim;
      }
      if (other.Cause.Length != 0) {
        Cause = other.Cause;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Killer = input.ReadString();
            break;
          }
          case 18: {
            Victim = input.ReadString();
            break;
          }
          case 26: {
            Cause = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EarningsEvent : pb::IMessage<EarningsEvent> {
    private static readonly pb::MessageParser<EarningsEvent> _parser = new pb::MessageParser<EarningsEvent>(() => new EarningsEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EarningsEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bbh.GameserverReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EarningsEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EarningsEvent(EarningsEvent other) : this() {
      user_ = other.user_;
      amt_ = other.amt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EarningsEvent Clone() {
      return new EarningsEvent(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amt" field.</summary>
    public const int AmtFieldNumber = 2;
    private long amt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amt {
      get { return amt_; }
      set {
        amt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EarningsEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EarningsEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (User != other.User) return false;
      if (Amt != other.Amt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (Amt != 0L) hash ^= Amt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (User.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(User);
      }
      if (Amt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (Amt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EarningsEvent other) {
      if (other == null) {
        return;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.Amt != 0L) {
        Amt = other.Amt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            User = input.ReadString();
            break;
          }
          case 16: {
            Amt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfoEvent : pb::IMessage<PlayerInfoEvent> {
    private static readonly pb::MessageParser<PlayerInfoEvent> _parser = new pb::MessageParser<PlayerInfoEvent>(() => new PlayerInfoEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfoEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bbh.GameserverReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoEvent(PlayerInfoEvent other) : this() {
      user_ = other.user_;
      eventType_ = other.eventType_;
      currentBounty_ = other.currentBounty_;
      currentKills_ = other.currentKills_;
      currentDeaths_ = other.currentDeaths_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoEvent Clone() {
      return new PlayerInfoEvent(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 2;
    private global::Bbh.PlayerInfoEvent.Types.EventType eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bbh.PlayerInfoEvent.Types.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "current_bounty" field.</summary>
    public const int CurrentBountyFieldNumber = 3;
    private long currentBounty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentBounty {
      get { return currentBounty_; }
      set {
        currentBounty_ = value;
      }
    }

    /// <summary>Field number for the "current_kills" field.</summary>
    public const int CurrentKillsFieldNumber = 4;
    private int currentKills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentKills {
      get { return currentKills_; }
      set {
        currentKills_ = value;
      }
    }

    /// <summary>Field number for the "current_deaths" field.</summary>
    public const int CurrentDeathsFieldNumber = 5;
    private int currentDeaths_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentDeaths {
      get { return currentDeaths_; }
      set {
        currentDeaths_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfoEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfoEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (User != other.User) return false;
      if (EventType != other.EventType) return false;
      if (CurrentBounty != other.CurrentBounty) return false;
      if (CurrentKills != other.CurrentKills) return false;
      if (CurrentDeaths != other.CurrentDeaths) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (CurrentBounty != 0L) hash ^= CurrentBounty.GetHashCode();
      if (CurrentKills != 0) hash ^= CurrentKills.GetHashCode();
      if (CurrentDeaths != 0) hash ^= CurrentDeaths.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (User.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(User);
      }
      if (EventType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventType);
      }
      if (CurrentBounty != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurrentBounty);
      }
      if (CurrentKills != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentKills);
      }
      if (CurrentDeaths != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurrentDeaths);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (CurrentBounty != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentBounty);
      }
      if (CurrentKills != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentKills);
      }
      if (CurrentDeaths != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentDeaths);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfoEvent other) {
      if (other == null) {
        return;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.CurrentBounty != 0L) {
        CurrentBounty = other.CurrentBounty;
      }
      if (other.CurrentKills != 0) {
        CurrentKills = other.CurrentKills;
      }
      if (other.CurrentDeaths != 0) {
        CurrentDeaths = other.CurrentDeaths;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            User = input.ReadString();
            break;
          }
          case 16: {
            EventType = (global::Bbh.PlayerInfoEvent.Types.EventType) input.ReadEnum();
            break;
          }
          case 24: {
            CurrentBounty = input.ReadInt64();
            break;
          }
          case 32: {
            CurrentKills = input.ReadInt32();
            break;
          }
          case 40: {
            CurrentDeaths = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PlayerInfoEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EventType {
        [pbr::OriginalName("HEARTBEAT")] Heartbeat = 0,
        [pbr::OriginalName("DISCONNECT")] Disconnect = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
