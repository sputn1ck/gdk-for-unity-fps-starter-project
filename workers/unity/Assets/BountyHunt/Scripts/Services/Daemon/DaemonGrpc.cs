// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: daemon/daemon.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Daemon {
  public static partial class DaemonService
  {
    static readonly string __ServiceName = "daemon.DaemonService";

    static readonly grpc::Marshaller<global::Daemon.LncliRequest> __Marshaller_daemon_LncliRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Daemon.LncliRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Daemon.LncliResponse> __Marshaller_daemon_LncliResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Daemon.LncliResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Daemon.GetConnectionRequest> __Marshaller_daemon_GetConnectionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Daemon.GetConnectionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Daemon.GetConnectionResponse> __Marshaller_daemon_GetConnectionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Daemon.GetConnectionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Daemon.GetBalanceRequest> __Marshaller_daemon_GetBalanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Daemon.GetBalanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Daemon.GetBalanceResponse> __Marshaller_daemon_GetBalanceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Daemon.GetBalanceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Daemon.LnurlWithdrawRequest> __Marshaller_daemon_LnurlWithdrawRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Daemon.LnurlWithdrawRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Daemon.LnurlWithdrawResponse> __Marshaller_daemon_LnurlWithdrawResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Daemon.LnurlWithdrawResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Daemon.LncliRequest, global::Daemon.LncliResponse> __Method_Lncli = new grpc::Method<global::Daemon.LncliRequest, global::Daemon.LncliResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Lncli",
        __Marshaller_daemon_LncliRequest,
        __Marshaller_daemon_LncliResponse);

    static readonly grpc::Method<global::Daemon.GetConnectionRequest, global::Daemon.GetConnectionResponse> __Method_GetConnection = new grpc::Method<global::Daemon.GetConnectionRequest, global::Daemon.GetConnectionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConnection",
        __Marshaller_daemon_GetConnectionRequest,
        __Marshaller_daemon_GetConnectionResponse);

    static readonly grpc::Method<global::Daemon.GetBalanceRequest, global::Daemon.GetBalanceResponse> __Method_GetBalance = new grpc::Method<global::Daemon.GetBalanceRequest, global::Daemon.GetBalanceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBalance",
        __Marshaller_daemon_GetBalanceRequest,
        __Marshaller_daemon_GetBalanceResponse);

    static readonly grpc::Method<global::Daemon.LnurlWithdrawRequest, global::Daemon.LnurlWithdrawResponse> __Method_LnurlWithdraw = new grpc::Method<global::Daemon.LnurlWithdrawRequest, global::Daemon.LnurlWithdrawResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "LnurlWithdraw",
        __Marshaller_daemon_LnurlWithdrawRequest,
        __Marshaller_daemon_LnurlWithdrawResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Daemon.DaemonReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DaemonService</summary>
    [grpc::BindServiceMethod(typeof(DaemonService), "BindService")]
    public abstract partial class DaemonServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Daemon.LncliResponse> Lncli(global::Daemon.LncliRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Daemon.GetConnectionResponse> GetConnection(global::Daemon.GetConnectionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Daemon.GetBalanceResponse> GetBalance(global::Daemon.GetBalanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task LnurlWithdraw(global::Daemon.LnurlWithdrawRequest request, grpc::IServerStreamWriter<global::Daemon.LnurlWithdrawResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DaemonService</summary>
    public partial class DaemonServiceClient : grpc::ClientBase<DaemonServiceClient>
    {
      /// <summary>Creates a new client for DaemonService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DaemonServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DaemonService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DaemonServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DaemonServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DaemonServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Daemon.LncliResponse Lncli(global::Daemon.LncliRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Lncli(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Daemon.LncliResponse Lncli(global::Daemon.LncliRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Lncli, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Daemon.LncliResponse> LncliAsync(global::Daemon.LncliRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LncliAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Daemon.LncliResponse> LncliAsync(global::Daemon.LncliRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Lncli, null, options, request);
      }
      public virtual global::Daemon.GetConnectionResponse GetConnection(global::Daemon.GetConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Daemon.GetConnectionResponse GetConnection(global::Daemon.GetConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConnection, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Daemon.GetConnectionResponse> GetConnectionAsync(global::Daemon.GetConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Daemon.GetConnectionResponse> GetConnectionAsync(global::Daemon.GetConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConnection, null, options, request);
      }
      public virtual global::Daemon.GetBalanceResponse GetBalance(global::Daemon.GetBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Daemon.GetBalanceResponse GetBalance(global::Daemon.GetBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBalance, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Daemon.GetBalanceResponse> GetBalanceAsync(global::Daemon.GetBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Daemon.GetBalanceResponse> GetBalanceAsync(global::Daemon.GetBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBalance, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Daemon.LnurlWithdrawResponse> LnurlWithdraw(global::Daemon.LnurlWithdrawRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LnurlWithdraw(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Daemon.LnurlWithdrawResponse> LnurlWithdraw(global::Daemon.LnurlWithdrawRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_LnurlWithdraw, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DaemonServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DaemonServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DaemonServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Lncli, serviceImpl.Lncli)
          .AddMethod(__Method_GetConnection, serviceImpl.GetConnection)
          .AddMethod(__Method_GetBalance, serviceImpl.GetBalance)
          .AddMethod(__Method_LnurlWithdraw, serviceImpl.LnurlWithdraw).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DaemonServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Lncli, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Daemon.LncliRequest, global::Daemon.LncliResponse>(serviceImpl.Lncli));
      serviceBinder.AddMethod(__Method_GetConnection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Daemon.GetConnectionRequest, global::Daemon.GetConnectionResponse>(serviceImpl.GetConnection));
      serviceBinder.AddMethod(__Method_GetBalance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Daemon.GetBalanceRequest, global::Daemon.GetBalanceResponse>(serviceImpl.GetBalance));
      serviceBinder.AddMethod(__Method_LnurlWithdraw, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Daemon.LnurlWithdrawRequest, global::Daemon.LnurlWithdrawResponse>(serviceImpl.LnurlWithdraw));
    }

  }
}
#endregion
