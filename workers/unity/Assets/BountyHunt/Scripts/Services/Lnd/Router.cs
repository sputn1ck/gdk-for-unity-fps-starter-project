// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: lnd/router.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Routerrpc {

  /// <summary>Holder for reflection information generated from lnd/router.proto</summary>
  public static partial class RouterReflection {

    #region Descriptor
    /// <summary>File descriptor for lnd/router.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RouterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBsbmQvcm91dGVyLnByb3RvEglyb3V0ZXJycGMaDWxuZC9ycGMucHJvdG8i",
            "xwQKElNlbmRQYXltZW50UmVxdWVzdBIMCgRkZXN0GAEgASgMEgsKA2FtdBgC",
            "IAEoAxIQCghhbXRfbXNhdBgMIAEoAxIUCgxwYXltZW50X2hhc2gYAyABKAwS",
            "GAoQZmluYWxfY2x0dl9kZWx0YRgEIAEoBRIXCg9wYXltZW50X3JlcXVlc3QY",
            "BSABKAkSFwoPdGltZW91dF9zZWNvbmRzGAYgASgFEhUKDWZlZV9saW1pdF9z",
            "YXQYByABKAMSFgoOZmVlX2xpbWl0X21zYXQYDSABKAMSHAoQb3V0Z29pbmdf",
            "Y2hhbl9pZBgIIAEoBEICMAESFwoPbGFzdF9ob3BfcHVia2V5GA4gASgMEhIK",
            "CmNsdHZfbGltaXQYCSABKAUSJQoLcm91dGVfaGludHMYCiADKAsyEC5sbnJw",
            "Yy5Sb3V0ZUhpbnQSUQoTZGVzdF9jdXN0b21fcmVjb3JkcxgLIAMoCzI0LnJv",
            "dXRlcnJwYy5TZW5kUGF5bWVudFJlcXVlc3QuRGVzdEN1c3RvbVJlY29yZHNF",
            "bnRyeRIaChJhbGxvd19zZWxmX3BheW1lbnQYDyABKAgSKAoNZGVzdF9mZWF0",
            "dXJlcxgQIAMoDjIRLmxucnBjLkZlYXR1cmVCaXQSEQoJbWF4X3BhcnRzGBEg",
            "ASgNEhsKE25vX2luZmxpZ2h0X3VwZGF0ZXMYEiABKAgaOAoWRGVzdEN1c3Rv",
            "bVJlY29yZHNFbnRyeRILCgNrZXkYASABKAQSDQoFdmFsdWUYAiABKAw6AjgB",
            "IkgKE1RyYWNrUGF5bWVudFJlcXVlc3QSFAoMcGF5bWVudF9oYXNoGAEgASgM",
            "EhsKE25vX2luZmxpZ2h0X3VwZGF0ZXMYAiABKAgiMAoPUm91dGVGZWVSZXF1",
            "ZXN0EgwKBGRlc3QYASABKAwSDwoHYW10X3NhdBgCIAEoAyJFChBSb3V0ZUZl",
            "ZVJlc3BvbnNlEhgKEHJvdXRpbmdfZmVlX21zYXQYASABKAMSFwoPdGltZV9s",
            "b2NrX2RlbGF5GAIgASgDIkcKElNlbmRUb1JvdXRlUmVxdWVzdBIUCgxwYXlt",
            "ZW50X2hhc2gYASABKAwSGwoFcm91dGUYAiABKAsyDC5sbnJwYy5Sb3V0ZSJI",
            "ChNTZW5kVG9Sb3V0ZVJlc3BvbnNlEhAKCHByZWltYWdlGAEgASgMEh8KB2Zh",
            "aWx1cmUYAiABKAsyDi5sbnJwYy5GYWlsdXJlIhwKGlJlc2V0TWlzc2lvbkNv",
            "bnRyb2xSZXF1ZXN0Ih0KG1Jlc2V0TWlzc2lvbkNvbnRyb2xSZXNwb25zZSIc",
            "ChpRdWVyeU1pc3Npb25Db250cm9sUmVxdWVzdCJKChtRdWVyeU1pc3Npb25D",
            "b250cm9sUmVzcG9uc2USJQoFcGFpcnMYAiADKAsyFi5yb3V0ZXJycGMuUGFp",
            "ckhpc3RvcnlKBAgBEAIibwoLUGFpckhpc3RvcnkSEQoJbm9kZV9mcm9tGAEg",
            "ASgMEg8KB25vZGVfdG8YAiABKAwSJAoHaGlzdG9yeRgHIAEoCzITLnJvdXRl",
            "cnJwYy5QYWlyRGF0YUoECAMQBEoECAQQBUoECAUQBkoECAYQByKZAQoIUGFp",
            "ckRhdGESEQoJZmFpbF90aW1lGAEgASgDEhQKDGZhaWxfYW10X3NhdBgCIAEo",
            "AxIVCg1mYWlsX2FtdF9tc2F0GAQgASgDEhQKDHN1Y2Nlc3NfdGltZRgFIAEo",
            "AxIXCg9zdWNjZXNzX2FtdF9zYXQYBiABKAMSGAoQc3VjY2Vzc19hbXRfbXNh",
            "dBgHIAEoA0oECAMQBCJPChdRdWVyeVByb2JhYmlsaXR5UmVxdWVzdBIRCglm",
            "cm9tX25vZGUYASABKAwSDwoHdG9fbm9kZRgCIAEoDBIQCghhbXRfbXNhdBgD",
            "IAEoAyJVChhRdWVyeVByb2JhYmlsaXR5UmVzcG9uc2USEwoLcHJvYmFiaWxp",
            "dHkYASABKAESJAoHaGlzdG9yeRgCIAEoCzITLnJvdXRlcnJwYy5QYWlyRGF0",
            "YSJyChFCdWlsZFJvdXRlUmVxdWVzdBIQCghhbXRfbXNhdBgBIAEoAxIYChBm",
            "aW5hbF9jbHR2X2RlbHRhGAIgASgFEhwKEG91dGdvaW5nX2NoYW5faWQYAyAB",
            "KARCAjABEhMKC2hvcF9wdWJrZXlzGAQgAygMIjEKEkJ1aWxkUm91dGVSZXNw",
            "b25zZRIbCgVyb3V0ZRgBIAEoCzIMLmxucnBjLlJvdXRlIhwKGlN1YnNjcmli",
            "ZUh0bGNFdmVudHNSZXF1ZXN0ItwDCglIdGxjRXZlbnQSGwoTaW5jb21pbmdf",
            "Y2hhbm5lbF9pZBgBIAEoBBIbChNvdXRnb2luZ19jaGFubmVsX2lkGAIgASgE",
            "EhgKEGluY29taW5nX2h0bGNfaWQYAyABKAQSGAoQb3V0Z29pbmdfaHRsY19p",
            "ZBgEIAEoBBIUCgx0aW1lc3RhbXBfbnMYBSABKAQSMgoKZXZlbnRfdHlwZRgG",
            "IAEoDjIeLnJvdXRlcnJwYy5IdGxjRXZlbnQuRXZlbnRUeXBlEjAKDWZvcndh",
            "cmRfZXZlbnQYByABKAsyFy5yb3V0ZXJycGMuRm9yd2FyZEV2ZW50SAASOQoS",
            "Zm9yd2FyZF9mYWlsX2V2ZW50GAggASgLMhsucm91dGVycnBjLkZvcndhcmRG",
            "YWlsRXZlbnRIABIuCgxzZXR0bGVfZXZlbnQYCSABKAsyFi5yb3V0ZXJycGMu",
            "U2V0dGxlRXZlbnRIABIzCg9saW5rX2ZhaWxfZXZlbnQYCiABKAsyGC5yb3V0",
            "ZXJycGMuTGlua0ZhaWxFdmVudEgAIjwKCUV2ZW50VHlwZRILCgdVTktOT1dO",
            "EAASCAoEU0VORBABEgsKB1JFQ0VJVkUQAhILCgdGT1JXQVJEEANCBwoFZXZl",
            "bnQidgoISHRsY0luZm8SGQoRaW5jb21pbmdfdGltZWxvY2sYASABKA0SGQoR",
            "b3V0Z29pbmdfdGltZWxvY2sYAiABKA0SGQoRaW5jb21pbmdfYW10X21zYXQY",
            "AyABKAQSGQoRb3V0Z29pbmdfYW10X21zYXQYBCABKAQiMQoMRm9yd2FyZEV2",
            "ZW50EiEKBGluZm8YASABKAsyEy5yb3V0ZXJycGMuSHRsY0luZm8iEgoQRm9y",
            "d2FyZEZhaWxFdmVudCINCgtTZXR0bGVFdmVudCKuAQoNTGlua0ZhaWxFdmVu",
            "dBIhCgRpbmZvGAEgASgLMhMucm91dGVycnBjLkh0bGNJbmZvEjAKDHdpcmVf",
            "ZmFpbHVyZRgCIAEoDjIaLmxucnBjLkZhaWx1cmUuRmFpbHVyZUNvZGUSMAoO",
            "ZmFpbHVyZV9kZXRhaWwYAyABKA4yGC5yb3V0ZXJycGMuRmFpbHVyZURldGFp",
            "bBIWCg5mYWlsdXJlX3N0cmluZxgEIAEoCSJyCg1QYXltZW50U3RhdHVzEiYK",
            "BXN0YXRlGAEgASgOMhcucm91dGVycnBjLlBheW1lbnRTdGF0ZRIQCghwcmVp",
            "bWFnZRgCIAEoDBIhCgVodGxjcxgEIAMoCzISLmxucnBjLkhUTENBdHRlbXB0",
            "SgQIAxAEKoEECg1GYWlsdXJlRGV0YWlsEgsKB1VOS05PV04QABINCglOT19E",
            "RVRBSUwQARIQCgxPTklPTl9ERUNPREUQAhIVChFMSU5LX05PVF9FTElHSUJM",
            "RRADEhQKEE9OX0NIQUlOX1RJTUVPVVQQBBIUChBIVExDX0VYQ0VFRFNfTUFY",
            "EAUSGAoUSU5TVUZGSUNJRU5UX0JBTEFOQ0UQBhIWChJJTkNPTVBMRVRFX0ZP",
            "UldBUkQQBxITCg9IVExDX0FERF9GQUlMRUQQCBIVChFGT1JXQVJEU19ESVNB",
            "QkxFRBAJEhQKEElOVk9JQ0VfQ0FOQ0VMRUQQChIVChFJTlZPSUNFX1VOREVS",
            "UEFJRBALEhsKF0lOVk9JQ0VfRVhQSVJZX1RPT19TT09OEAwSFAoQSU5WT0lD",
            "RV9OT1RfT1BFThANEhcKE01QUF9JTlZPSUNFX1RJTUVPVVQQDhIUChBBRERS",
            "RVNTX01JU01BVENIEA8SFgoSU0VUX1RPVEFMX01JU01BVENIEBASFQoRU0VU",
            "X1RPVEFMX1RPT19MT1cQERIQCgxTRVRfT1ZFUlBBSUQQEhITCg9VTktOT1dO",
            "X0lOVk9JQ0UQExITCg9JTlZBTElEX0tFWVNFTkQQFBITCg9NUFBfSU5fUFJP",
            "R1JFU1MQFRISCg5DSVJDVUxBUl9ST1VURRAWKq4BCgxQYXltZW50U3RhdGUS",
            "DQoJSU5fRkxJR0hUEAASDQoJU1VDQ0VFREVEEAESEgoORkFJTEVEX1RJTUVP",
            "VVQQAhITCg9GQUlMRURfTk9fUk9VVEUQAxIQCgxGQUlMRURfRVJST1IQBBIk",
            "CiBGQUlMRURfSU5DT1JSRUNUX1BBWU1FTlRfREVUQUlMUxAFEh8KG0ZBSUxF",
            "RF9JTlNVRkZJQ0lFTlRfQkFMQU5DRRAGMpMHCgZSb3V0ZXISQAoNU2VuZFBh",
            "eW1lbnRWMhIdLnJvdXRlcnJwYy5TZW5kUGF5bWVudFJlcXVlc3QaDi5sbnJw",
            "Yy5QYXltZW50MAESQgoOVHJhY2tQYXltZW50VjISHi5yb3V0ZXJycGMuVHJh",
            "Y2tQYXltZW50UmVxdWVzdBoOLmxucnBjLlBheW1lbnQwARJLChBFc3RpbWF0",
            "ZVJvdXRlRmVlEhoucm91dGVycnBjLlJvdXRlRmVlUmVxdWVzdBobLnJvdXRl",
            "cnJwYy5Sb3V0ZUZlZVJlc3BvbnNlEkwKC1NlbmRUb1JvdXRlEh0ucm91dGVy",
            "cnBjLlNlbmRUb1JvdXRlUmVxdWVzdBoeLnJvdXRlcnJwYy5TZW5kVG9Sb3V0",
            "ZVJlc3BvbnNlEmQKE1Jlc2V0TWlzc2lvbkNvbnRyb2wSJS5yb3V0ZXJycGMu",
            "UmVzZXRNaXNzaW9uQ29udHJvbFJlcXVlc3QaJi5yb3V0ZXJycGMuUmVzZXRN",
            "aXNzaW9uQ29udHJvbFJlc3BvbnNlEmQKE1F1ZXJ5TWlzc2lvbkNvbnRyb2wS",
            "JS5yb3V0ZXJycGMuUXVlcnlNaXNzaW9uQ29udHJvbFJlcXVlc3QaJi5yb3V0",
            "ZXJycGMuUXVlcnlNaXNzaW9uQ29udHJvbFJlc3BvbnNlElsKEFF1ZXJ5UHJv",
            "YmFiaWxpdHkSIi5yb3V0ZXJycGMuUXVlcnlQcm9iYWJpbGl0eVJlcXVlc3Qa",
            "Iy5yb3V0ZXJycGMuUXVlcnlQcm9iYWJpbGl0eVJlc3BvbnNlEkkKCkJ1aWxk",
            "Um91dGUSHC5yb3V0ZXJycGMuQnVpbGRSb3V0ZVJlcXVlc3QaHS5yb3V0ZXJy",
            "cGMuQnVpbGRSb3V0ZVJlc3BvbnNlElQKE1N1YnNjcmliZUh0bGNFdmVudHMS",
            "JS5yb3V0ZXJycGMuU3Vic2NyaWJlSHRsY0V2ZW50c1JlcXVlc3QaFC5yb3V0",
            "ZXJycGMuSHRsY0V2ZW50MAESTQoLU2VuZFBheW1lbnQSHS5yb3V0ZXJycGMu",
            "U2VuZFBheW1lbnRSZXF1ZXN0Ghgucm91dGVycnBjLlBheW1lbnRTdGF0dXMi",
            "A4gCATABEk8KDFRyYWNrUGF5bWVudBIeLnJvdXRlcnJwYy5UcmFja1BheW1l",
            "bnRSZXF1ZXN0Ghgucm91dGVycnBjLlBheW1lbnRTdGF0dXMiA4gCATABQjFa",
            "L2dpdGh1Yi5jb20vbGlnaHRuaW5nbmV0d29yay9sbmQvbG5ycGMvcm91dGVy",
            "cnBjYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Lnrpc.RpcReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Routerrpc.FailureDetail), typeof(global::Routerrpc.PaymentState), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.SendPaymentRequest), global::Routerrpc.SendPaymentRequest.Parser, new[]{ "Dest", "Amt", "AmtMsat", "PaymentHash", "FinalCltvDelta", "PaymentRequest", "TimeoutSeconds", "FeeLimitSat", "FeeLimitMsat", "OutgoingChanId", "LastHopPubkey", "CltvLimit", "RouteHints", "DestCustomRecords", "AllowSelfPayment", "DestFeatures", "MaxParts", "NoInflightUpdates" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.TrackPaymentRequest), global::Routerrpc.TrackPaymentRequest.Parser, new[]{ "PaymentHash", "NoInflightUpdates" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.RouteFeeRequest), global::Routerrpc.RouteFeeRequest.Parser, new[]{ "Dest", "AmtSat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.RouteFeeResponse), global::Routerrpc.RouteFeeResponse.Parser, new[]{ "RoutingFeeMsat", "TimeLockDelay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.SendToRouteRequest), global::Routerrpc.SendToRouteRequest.Parser, new[]{ "PaymentHash", "Route" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.SendToRouteResponse), global::Routerrpc.SendToRouteResponse.Parser, new[]{ "Preimage", "Failure" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.ResetMissionControlRequest), global::Routerrpc.ResetMissionControlRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.ResetMissionControlResponse), global::Routerrpc.ResetMissionControlResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.QueryMissionControlRequest), global::Routerrpc.QueryMissionControlRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.QueryMissionControlResponse), global::Routerrpc.QueryMissionControlResponse.Parser, new[]{ "Pairs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.PairHistory), global::Routerrpc.PairHistory.Parser, new[]{ "NodeFrom", "NodeTo", "History" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.PairData), global::Routerrpc.PairData.Parser, new[]{ "FailTime", "FailAmtSat", "FailAmtMsat", "SuccessTime", "SuccessAmtSat", "SuccessAmtMsat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.QueryProbabilityRequest), global::Routerrpc.QueryProbabilityRequest.Parser, new[]{ "FromNode", "ToNode", "AmtMsat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.QueryProbabilityResponse), global::Routerrpc.QueryProbabilityResponse.Parser, new[]{ "Probability", "History" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.BuildRouteRequest), global::Routerrpc.BuildRouteRequest.Parser, new[]{ "AmtMsat", "FinalCltvDelta", "OutgoingChanId", "HopPubkeys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.BuildRouteResponse), global::Routerrpc.BuildRouteResponse.Parser, new[]{ "Route" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.SubscribeHtlcEventsRequest), global::Routerrpc.SubscribeHtlcEventsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.HtlcEvent), global::Routerrpc.HtlcEvent.Parser, new[]{ "IncomingChannelId", "OutgoingChannelId", "IncomingHtlcId", "OutgoingHtlcId", "TimestampNs", "EventType", "ForwardEvent", "ForwardFailEvent", "SettleEvent", "LinkFailEvent" }, new[]{ "Event" }, new[]{ typeof(global::Routerrpc.HtlcEvent.Types.EventType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.HtlcInfo), global::Routerrpc.HtlcInfo.Parser, new[]{ "IncomingTimelock", "OutgoingTimelock", "IncomingAmtMsat", "OutgoingAmtMsat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.ForwardEvent), global::Routerrpc.ForwardEvent.Parser, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.ForwardFailEvent), global::Routerrpc.ForwardFailEvent.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.SettleEvent), global::Routerrpc.SettleEvent.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.LinkFailEvent), global::Routerrpc.LinkFailEvent.Parser, new[]{ "Info", "WireFailure", "FailureDetail", "FailureString" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.PaymentStatus), global::Routerrpc.PaymentStatus.Parser, new[]{ "State", "Preimage", "Htlcs" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum FailureDetail {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("NO_DETAIL")] NoDetail = 1,
    [pbr::OriginalName("ONION_DECODE")] OnionDecode = 2,
    [pbr::OriginalName("LINK_NOT_ELIGIBLE")] LinkNotEligible = 3,
    [pbr::OriginalName("ON_CHAIN_TIMEOUT")] OnChainTimeout = 4,
    [pbr::OriginalName("HTLC_EXCEEDS_MAX")] HtlcExceedsMax = 5,
    [pbr::OriginalName("INSUFFICIENT_BALANCE")] InsufficientBalance = 6,
    [pbr::OriginalName("INCOMPLETE_FORWARD")] IncompleteForward = 7,
    [pbr::OriginalName("HTLC_ADD_FAILED")] HtlcAddFailed = 8,
    [pbr::OriginalName("FORWARDS_DISABLED")] ForwardsDisabled = 9,
    [pbr::OriginalName("INVOICE_CANCELED")] InvoiceCanceled = 10,
    [pbr::OriginalName("INVOICE_UNDERPAID")] InvoiceUnderpaid = 11,
    [pbr::OriginalName("INVOICE_EXPIRY_TOO_SOON")] InvoiceExpiryTooSoon = 12,
    [pbr::OriginalName("INVOICE_NOT_OPEN")] InvoiceNotOpen = 13,
    [pbr::OriginalName("MPP_INVOICE_TIMEOUT")] MppInvoiceTimeout = 14,
    [pbr::OriginalName("ADDRESS_MISMATCH")] AddressMismatch = 15,
    [pbr::OriginalName("SET_TOTAL_MISMATCH")] SetTotalMismatch = 16,
    [pbr::OriginalName("SET_TOTAL_TOO_LOW")] SetTotalTooLow = 17,
    [pbr::OriginalName("SET_OVERPAID")] SetOverpaid = 18,
    [pbr::OriginalName("UNKNOWN_INVOICE")] UnknownInvoice = 19,
    [pbr::OriginalName("INVALID_KEYSEND")] InvalidKeysend = 20,
    [pbr::OriginalName("MPP_IN_PROGRESS")] MppInProgress = 21,
    [pbr::OriginalName("CIRCULAR_ROUTE")] CircularRoute = 22,
  }

  public enum PaymentState {
    /// <summary>
    ///*
    ///Payment is still in flight.
    /// </summary>
    [pbr::OriginalName("IN_FLIGHT")] InFlight = 0,
    /// <summary>
    ///*
    ///Payment completed successfully.
    /// </summary>
    [pbr::OriginalName("SUCCEEDED")] Succeeded = 1,
    /// <summary>
    ///*
    ///There are more routes to try, but the payment timeout was exceeded.
    /// </summary>
    [pbr::OriginalName("FAILED_TIMEOUT")] FailedTimeout = 2,
    /// <summary>
    ///*
    ///All possible routes were tried and failed permanently. Or were no
    ///routes to the destination at all.
    /// </summary>
    [pbr::OriginalName("FAILED_NO_ROUTE")] FailedNoRoute = 3,
    /// <summary>
    ///*
    ///A non-recoverable error has occured.
    /// </summary>
    [pbr::OriginalName("FAILED_ERROR")] FailedError = 4,
    /// <summary>
    ///*
    ///Payment details incorrect (unknown hash, invalid amt or
    ///invalid final cltv delta)
    /// </summary>
    [pbr::OriginalName("FAILED_INCORRECT_PAYMENT_DETAILS")] FailedIncorrectPaymentDetails = 5,
    /// <summary>
    ///*
    ///Insufficient local balance.
    /// </summary>
    [pbr::OriginalName("FAILED_INSUFFICIENT_BALANCE")] FailedInsufficientBalance = 6,
  }

  #endregion

  #region Messages
  public sealed partial class SendPaymentRequest : pb::IMessage<SendPaymentRequest> {
    private static readonly pb::MessageParser<SendPaymentRequest> _parser = new pb::MessageParser<SendPaymentRequest>(() => new SendPaymentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendPaymentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPaymentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPaymentRequest(SendPaymentRequest other) : this() {
      dest_ = other.dest_;
      amt_ = other.amt_;
      amtMsat_ = other.amtMsat_;
      paymentHash_ = other.paymentHash_;
      finalCltvDelta_ = other.finalCltvDelta_;
      paymentRequest_ = other.paymentRequest_;
      timeoutSeconds_ = other.timeoutSeconds_;
      feeLimitSat_ = other.feeLimitSat_;
      feeLimitMsat_ = other.feeLimitMsat_;
      outgoingChanId_ = other.outgoingChanId_;
      lastHopPubkey_ = other.lastHopPubkey_;
      cltvLimit_ = other.cltvLimit_;
      routeHints_ = other.routeHints_.Clone();
      destCustomRecords_ = other.destCustomRecords_.Clone();
      allowSelfPayment_ = other.allowSelfPayment_;
      destFeatures_ = other.destFeatures_.Clone();
      maxParts_ = other.maxParts_;
      noInflightUpdates_ = other.noInflightUpdates_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPaymentRequest Clone() {
      return new SendPaymentRequest(this);
    }

    /// <summary>Field number for the "dest" field.</summary>
    public const int DestFieldNumber = 1;
    private pb::ByteString dest_ = pb::ByteString.Empty;
    /// <summary>
    //// The identity pubkey of the payment recipient
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Dest {
      get { return dest_; }
      set {
        dest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amt" field.</summary>
    public const int AmtFieldNumber = 2;
    private long amt_;
    /// <summary>
    ///*
    ///Number of satoshis to send.
    ///
    ///The fields amt and amt_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amt {
      get { return amt_; }
      set {
        amt_ = value;
      }
    }

    /// <summary>Field number for the "amt_msat" field.</summary>
    public const int AmtMsatFieldNumber = 12;
    private long amtMsat_;
    /// <summary>
    ///*
    ///Number of millisatoshis to send.
    ///
    ///The fields amt and amt_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtMsat {
      get { return amtMsat_; }
      set {
        amtMsat_ = value;
      }
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 3;
    private pb::ByteString paymentHash_ = pb::ByteString.Empty;
    /// <summary>
    //// The hash to use within the payment's HTLC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "final_cltv_delta" field.</summary>
    public const int FinalCltvDeltaFieldNumber = 4;
    private int finalCltvDelta_;
    /// <summary>
    ///*
    ///The CLTV delta from the current height that should be used to set the
    ///timelock for the final hop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalCltvDelta {
      get { return finalCltvDelta_; }
      set {
        finalCltvDelta_ = value;
      }
    }

    /// <summary>Field number for the "payment_request" field.</summary>
    public const int PaymentRequestFieldNumber = 5;
    private string paymentRequest_ = "";
    /// <summary>
    ///*
    ///A bare-bones invoice for a payment within the Lightning Network.  With the
    ///details of the invoice, the sender has all the data necessary to send a
    ///payment to the recipient. The amount in the payment request may be zero. In
    ///that case it is required to set the amt field as well. If no payment request
    ///is specified, the following fields are required: dest, amt and payment_hash.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentRequest {
      get { return paymentRequest_; }
      set {
        paymentRequest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeout_seconds" field.</summary>
    public const int TimeoutSecondsFieldNumber = 6;
    private int timeoutSeconds_;
    /// <summary>
    ///*
    ///An upper limit on the amount of time we should spend when attempting to
    ///fulfill the payment. This is expressed in seconds. If we cannot make a
    ///successful payment within this time frame, an error will be returned.
    ///This field must be non-zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeoutSeconds {
      get { return timeoutSeconds_; }
      set {
        timeoutSeconds_ = value;
      }
    }

    /// <summary>Field number for the "fee_limit_sat" field.</summary>
    public const int FeeLimitSatFieldNumber = 7;
    private long feeLimitSat_;
    /// <summary>
    ///*
    ///The maximum number of satoshis that will be paid as a fee of the payment.
    ///If this field is left to the default value of 0, only zero-fee routes will
    ///be considered. This usually means single hop routes connecting directly to
    ///the destination. To send the payment without a fee limit, use max int here.
    ///
    ///The fields fee_limit_sat and fee_limit_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeLimitSat {
      get { return feeLimitSat_; }
      set {
        feeLimitSat_ = value;
      }
    }

    /// <summary>Field number for the "fee_limit_msat" field.</summary>
    public const int FeeLimitMsatFieldNumber = 13;
    private long feeLimitMsat_;
    /// <summary>
    ///*
    ///The maximum number of millisatoshis that will be paid as a fee of the
    ///payment. If this field is left to the default value of 0, only zero-fee
    ///routes will be considered. This usually means single hop routes connecting
    ///directly to the destination. To send the payment without a fee limit, use
    ///max int here.
    ///
    ///The fields fee_limit_sat and fee_limit_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeLimitMsat {
      get { return feeLimitMsat_; }
      set {
        feeLimitMsat_ = value;
      }
    }

    /// <summary>Field number for the "outgoing_chan_id" field.</summary>
    public const int OutgoingChanIdFieldNumber = 8;
    private ulong outgoingChanId_;
    /// <summary>
    ///*
    ///The channel id of the channel that must be taken to the first hop. If zero,
    ///any channel may be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutgoingChanId {
      get { return outgoingChanId_; }
      set {
        outgoingChanId_ = value;
      }
    }

    /// <summary>Field number for the "last_hop_pubkey" field.</summary>
    public const int LastHopPubkeyFieldNumber = 14;
    private pb::ByteString lastHopPubkey_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The pubkey of the last hop of the route. If empty, any hop may be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LastHopPubkey {
      get { return lastHopPubkey_; }
      set {
        lastHopPubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cltv_limit" field.</summary>
    public const int CltvLimitFieldNumber = 9;
    private int cltvLimit_;
    /// <summary>
    ///*
    ///An optional maximum total time lock for the route. This should not exceed
    ///lnd's `--max-cltv-expiry` setting. If zero, then the value of
    ///`--max-cltv-expiry` is enforced.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CltvLimit {
      get { return cltvLimit_; }
      set {
        cltvLimit_ = value;
      }
    }

    /// <summary>Field number for the "route_hints" field.</summary>
    public const int RouteHintsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Lnrpc.RouteHint> _repeated_routeHints_codec
        = pb::FieldCodec.ForMessage(82, global::Lnrpc.RouteHint.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.RouteHint> routeHints_ = new pbc::RepeatedField<global::Lnrpc.RouteHint>();
    /// <summary>
    ///*
    ///Optional route hints to reach the destination through private channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.RouteHint> RouteHints {
      get { return routeHints_; }
    }

    /// <summary>Field number for the "dest_custom_records" field.</summary>
    public const int DestCustomRecordsFieldNumber = 11;
    private static readonly pbc::MapField<ulong, pb::ByteString>.Codec _map_destCustomRecords_codec
        = new pbc::MapField<ulong, pb::ByteString>.Codec(pb::FieldCodec.ForUInt64(8), pb::FieldCodec.ForBytes(18), 90);
    private readonly pbc::MapField<ulong, pb::ByteString> destCustomRecords_ = new pbc::MapField<ulong, pb::ByteString>();
    /// <summary>
    ///*
    ///An optional field that can be used to pass an arbitrary set of TLV records
    ///to a peer which understands the new records. This can be used to pass
    ///application specific data during the payment attempt. Record types are
    ///required to be in the custom range >= 65536. When using REST, the values
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, pb::ByteString> DestCustomRecords {
      get { return destCustomRecords_; }
    }

    /// <summary>Field number for the "allow_self_payment" field.</summary>
    public const int AllowSelfPaymentFieldNumber = 15;
    private bool allowSelfPayment_;
    /// <summary>
    //// If set, circular payments to self are permitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowSelfPayment {
      get { return allowSelfPayment_; }
      set {
        allowSelfPayment_ = value;
      }
    }

    /// <summary>Field number for the "dest_features" field.</summary>
    public const int DestFeaturesFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Lnrpc.FeatureBit> _repeated_destFeatures_codec
        = pb::FieldCodec.ForEnum(130, x => (int) x, x => (global::Lnrpc.FeatureBit) x);
    private readonly pbc::RepeatedField<global::Lnrpc.FeatureBit> destFeatures_ = new pbc::RepeatedField<global::Lnrpc.FeatureBit>();
    /// <summary>
    ///*
    ///Features assumed to be supported by the final node. All transitive feature
    ///dependencies must also be set properly. For a given feature bit pair, either
    ///optional or remote may be set, but not both. If this field is nil or empty,
    ///the router will try to load destination features from the graph as a
    ///fallback.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.FeatureBit> DestFeatures {
      get { return destFeatures_; }
    }

    /// <summary>Field number for the "max_parts" field.</summary>
    public const int MaxPartsFieldNumber = 17;
    private uint maxParts_;
    /// <summary>
    ///*
    ///The maximum number of partial payments that may be use to complete the full
    ///amount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxParts {
      get { return maxParts_; }
      set {
        maxParts_ = value;
      }
    }

    /// <summary>Field number for the "no_inflight_updates" field.</summary>
    public const int NoInflightUpdatesFieldNumber = 18;
    private bool noInflightUpdates_;
    /// <summary>
    ///*
    ///If set, only the final payment update is streamed back. Intermediate updates
    ///that show which htlcs are still in flight are suppressed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoInflightUpdates {
      get { return noInflightUpdates_; }
      set {
        noInflightUpdates_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendPaymentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendPaymentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dest != other.Dest) return false;
      if (Amt != other.Amt) return false;
      if (AmtMsat != other.AmtMsat) return false;
      if (PaymentHash != other.PaymentHash) return false;
      if (FinalCltvDelta != other.FinalCltvDelta) return false;
      if (PaymentRequest != other.PaymentRequest) return false;
      if (TimeoutSeconds != other.TimeoutSeconds) return false;
      if (FeeLimitSat != other.FeeLimitSat) return false;
      if (FeeLimitMsat != other.FeeLimitMsat) return false;
      if (OutgoingChanId != other.OutgoingChanId) return false;
      if (LastHopPubkey != other.LastHopPubkey) return false;
      if (CltvLimit != other.CltvLimit) return false;
      if(!routeHints_.Equals(other.routeHints_)) return false;
      if (!DestCustomRecords.Equals(other.DestCustomRecords)) return false;
      if (AllowSelfPayment != other.AllowSelfPayment) return false;
      if(!destFeatures_.Equals(other.destFeatures_)) return false;
      if (MaxParts != other.MaxParts) return false;
      if (NoInflightUpdates != other.NoInflightUpdates) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dest.Length != 0) hash ^= Dest.GetHashCode();
      if (Amt != 0L) hash ^= Amt.GetHashCode();
      if (AmtMsat != 0L) hash ^= AmtMsat.GetHashCode();
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (FinalCltvDelta != 0) hash ^= FinalCltvDelta.GetHashCode();
      if (PaymentRequest.Length != 0) hash ^= PaymentRequest.GetHashCode();
      if (TimeoutSeconds != 0) hash ^= TimeoutSeconds.GetHashCode();
      if (FeeLimitSat != 0L) hash ^= FeeLimitSat.GetHashCode();
      if (FeeLimitMsat != 0L) hash ^= FeeLimitMsat.GetHashCode();
      if (OutgoingChanId != 0UL) hash ^= OutgoingChanId.GetHashCode();
      if (LastHopPubkey.Length != 0) hash ^= LastHopPubkey.GetHashCode();
      if (CltvLimit != 0) hash ^= CltvLimit.GetHashCode();
      hash ^= routeHints_.GetHashCode();
      hash ^= DestCustomRecords.GetHashCode();
      if (AllowSelfPayment != false) hash ^= AllowSelfPayment.GetHashCode();
      hash ^= destFeatures_.GetHashCode();
      if (MaxParts != 0) hash ^= MaxParts.GetHashCode();
      if (NoInflightUpdates != false) hash ^= NoInflightUpdates.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dest.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Dest);
      }
      if (Amt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amt);
      }
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PaymentHash);
      }
      if (FinalCltvDelta != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FinalCltvDelta);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PaymentRequest);
      }
      if (TimeoutSeconds != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TimeoutSeconds);
      }
      if (FeeLimitSat != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(FeeLimitSat);
      }
      if (OutgoingChanId != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(OutgoingChanId);
      }
      if (CltvLimit != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CltvLimit);
      }
      routeHints_.WriteTo(output, _repeated_routeHints_codec);
      destCustomRecords_.WriteTo(output, _map_destCustomRecords_codec);
      if (AmtMsat != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(AmtMsat);
      }
      if (FeeLimitMsat != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(FeeLimitMsat);
      }
      if (LastHopPubkey.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(LastHopPubkey);
      }
      if (AllowSelfPayment != false) {
        output.WriteRawTag(120);
        output.WriteBool(AllowSelfPayment);
      }
      destFeatures_.WriteTo(output, _repeated_destFeatures_codec);
      if (MaxParts != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(MaxParts);
      }
      if (NoInflightUpdates != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(NoInflightUpdates);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Dest);
      }
      if (Amt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amt);
      }
      if (AmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtMsat);
      }
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentHash);
      }
      if (FinalCltvDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalCltvDelta);
      }
      if (PaymentRequest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentRequest);
      }
      if (TimeoutSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeoutSeconds);
      }
      if (FeeLimitSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeLimitSat);
      }
      if (FeeLimitMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeLimitMsat);
      }
      if (OutgoingChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutgoingChanId);
      }
      if (LastHopPubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LastHopPubkey);
      }
      if (CltvLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CltvLimit);
      }
      size += routeHints_.CalculateSize(_repeated_routeHints_codec);
      size += destCustomRecords_.CalculateSize(_map_destCustomRecords_codec);
      if (AllowSelfPayment != false) {
        size += 1 + 1;
      }
      size += destFeatures_.CalculateSize(_repeated_destFeatures_codec);
      if (MaxParts != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxParts);
      }
      if (NoInflightUpdates != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendPaymentRequest other) {
      if (other == null) {
        return;
      }
      if (other.Dest.Length != 0) {
        Dest = other.Dest;
      }
      if (other.Amt != 0L) {
        Amt = other.Amt;
      }
      if (other.AmtMsat != 0L) {
        AmtMsat = other.AmtMsat;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      if (other.FinalCltvDelta != 0) {
        FinalCltvDelta = other.FinalCltvDelta;
      }
      if (other.PaymentRequest.Length != 0) {
        PaymentRequest = other.PaymentRequest;
      }
      if (other.TimeoutSeconds != 0) {
        TimeoutSeconds = other.TimeoutSeconds;
      }
      if (other.FeeLimitSat != 0L) {
        FeeLimitSat = other.FeeLimitSat;
      }
      if (other.FeeLimitMsat != 0L) {
        FeeLimitMsat = other.FeeLimitMsat;
      }
      if (other.OutgoingChanId != 0UL) {
        OutgoingChanId = other.OutgoingChanId;
      }
      if (other.LastHopPubkey.Length != 0) {
        LastHopPubkey = other.LastHopPubkey;
      }
      if (other.CltvLimit != 0) {
        CltvLimit = other.CltvLimit;
      }
      routeHints_.Add(other.routeHints_);
      destCustomRecords_.Add(other.destCustomRecords_);
      if (other.AllowSelfPayment != false) {
        AllowSelfPayment = other.AllowSelfPayment;
      }
      destFeatures_.Add(other.destFeatures_);
      if (other.MaxParts != 0) {
        MaxParts = other.MaxParts;
      }
      if (other.NoInflightUpdates != false) {
        NoInflightUpdates = other.NoInflightUpdates;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Dest = input.ReadBytes();
            break;
          }
          case 16: {
            Amt = input.ReadInt64();
            break;
          }
          case 26: {
            PaymentHash = input.ReadBytes();
            break;
          }
          case 32: {
            FinalCltvDelta = input.ReadInt32();
            break;
          }
          case 42: {
            PaymentRequest = input.ReadString();
            break;
          }
          case 48: {
            TimeoutSeconds = input.ReadInt32();
            break;
          }
          case 56: {
            FeeLimitSat = input.ReadInt64();
            break;
          }
          case 64: {
            OutgoingChanId = input.ReadUInt64();
            break;
          }
          case 72: {
            CltvLimit = input.ReadInt32();
            break;
          }
          case 82: {
            routeHints_.AddEntriesFrom(input, _repeated_routeHints_codec);
            break;
          }
          case 90: {
            destCustomRecords_.AddEntriesFrom(input, _map_destCustomRecords_codec);
            break;
          }
          case 96: {
            AmtMsat = input.ReadInt64();
            break;
          }
          case 104: {
            FeeLimitMsat = input.ReadInt64();
            break;
          }
          case 114: {
            LastHopPubkey = input.ReadBytes();
            break;
          }
          case 120: {
            AllowSelfPayment = input.ReadBool();
            break;
          }
          case 130:
          case 128: {
            destFeatures_.AddEntriesFrom(input, _repeated_destFeatures_codec);
            break;
          }
          case 136: {
            MaxParts = input.ReadUInt32();
            break;
          }
          case 144: {
            NoInflightUpdates = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrackPaymentRequest : pb::IMessage<TrackPaymentRequest> {
    private static readonly pb::MessageParser<TrackPaymentRequest> _parser = new pb::MessageParser<TrackPaymentRequest>(() => new TrackPaymentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackPaymentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackPaymentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackPaymentRequest(TrackPaymentRequest other) : this() {
      paymentHash_ = other.paymentHash_;
      noInflightUpdates_ = other.noInflightUpdates_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackPaymentRequest Clone() {
      return new TrackPaymentRequest(this);
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 1;
    private pb::ByteString paymentHash_ = pb::ByteString.Empty;
    /// <summary>
    //// The hash of the payment to look up.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "no_inflight_updates" field.</summary>
    public const int NoInflightUpdatesFieldNumber = 2;
    private bool noInflightUpdates_;
    /// <summary>
    ///*
    ///If set, only the final payment update is streamed back. Intermediate updates
    ///that show which htlcs are still in flight are suppressed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoInflightUpdates {
      get { return noInflightUpdates_; }
      set {
        noInflightUpdates_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackPaymentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackPaymentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaymentHash != other.PaymentHash) return false;
      if (NoInflightUpdates != other.NoInflightUpdates) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (NoInflightUpdates != false) hash ^= NoInflightUpdates.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PaymentHash);
      }
      if (NoInflightUpdates != false) {
        output.WriteRawTag(16);
        output.WriteBool(NoInflightUpdates);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentHash);
      }
      if (NoInflightUpdates != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackPaymentRequest other) {
      if (other == null) {
        return;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      if (other.NoInflightUpdates != false) {
        NoInflightUpdates = other.NoInflightUpdates;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PaymentHash = input.ReadBytes();
            break;
          }
          case 16: {
            NoInflightUpdates = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RouteFeeRequest : pb::IMessage<RouteFeeRequest> {
    private static readonly pb::MessageParser<RouteFeeRequest> _parser = new pb::MessageParser<RouteFeeRequest>(() => new RouteFeeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RouteFeeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteFeeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteFeeRequest(RouteFeeRequest other) : this() {
      dest_ = other.dest_;
      amtSat_ = other.amtSat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteFeeRequest Clone() {
      return new RouteFeeRequest(this);
    }

    /// <summary>Field number for the "dest" field.</summary>
    public const int DestFieldNumber = 1;
    private pb::ByteString dest_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The destination once wishes to obtain a routing fee quote to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Dest {
      get { return dest_; }
      set {
        dest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amt_sat" field.</summary>
    public const int AmtSatFieldNumber = 2;
    private long amtSat_;
    /// <summary>
    ///*
    ///The amount one wishes to send to the target destination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtSat {
      get { return amtSat_; }
      set {
        amtSat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RouteFeeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RouteFeeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dest != other.Dest) return false;
      if (AmtSat != other.AmtSat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dest.Length != 0) hash ^= Dest.GetHashCode();
      if (AmtSat != 0L) hash ^= AmtSat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dest.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Dest);
      }
      if (AmtSat != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AmtSat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Dest);
      }
      if (AmtSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtSat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RouteFeeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Dest.Length != 0) {
        Dest = other.Dest;
      }
      if (other.AmtSat != 0L) {
        AmtSat = other.AmtSat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Dest = input.ReadBytes();
            break;
          }
          case 16: {
            AmtSat = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RouteFeeResponse : pb::IMessage<RouteFeeResponse> {
    private static readonly pb::MessageParser<RouteFeeResponse> _parser = new pb::MessageParser<RouteFeeResponse>(() => new RouteFeeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RouteFeeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteFeeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteFeeResponse(RouteFeeResponse other) : this() {
      routingFeeMsat_ = other.routingFeeMsat_;
      timeLockDelay_ = other.timeLockDelay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteFeeResponse Clone() {
      return new RouteFeeResponse(this);
    }

    /// <summary>Field number for the "routing_fee_msat" field.</summary>
    public const int RoutingFeeMsatFieldNumber = 1;
    private long routingFeeMsat_;
    /// <summary>
    ///*
    ///A lower bound of the estimated fee to the target destination within the
    ///network, expressed in milli-satoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoutingFeeMsat {
      get { return routingFeeMsat_; }
      set {
        routingFeeMsat_ = value;
      }
    }

    /// <summary>Field number for the "time_lock_delay" field.</summary>
    public const int TimeLockDelayFieldNumber = 2;
    private long timeLockDelay_;
    /// <summary>
    ///*
    ///An estimate of the worst case time delay that can occur. Note that callers
    ///will still need to factor in the final CLTV delta of the last hop into this
    ///value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeLockDelay {
      get { return timeLockDelay_; }
      set {
        timeLockDelay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RouteFeeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RouteFeeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoutingFeeMsat != other.RoutingFeeMsat) return false;
      if (TimeLockDelay != other.TimeLockDelay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoutingFeeMsat != 0L) hash ^= RoutingFeeMsat.GetHashCode();
      if (TimeLockDelay != 0L) hash ^= TimeLockDelay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoutingFeeMsat != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoutingFeeMsat);
      }
      if (TimeLockDelay != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TimeLockDelay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoutingFeeMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoutingFeeMsat);
      }
      if (TimeLockDelay != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeLockDelay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RouteFeeResponse other) {
      if (other == null) {
        return;
      }
      if (other.RoutingFeeMsat != 0L) {
        RoutingFeeMsat = other.RoutingFeeMsat;
      }
      if (other.TimeLockDelay != 0L) {
        TimeLockDelay = other.TimeLockDelay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoutingFeeMsat = input.ReadInt64();
            break;
          }
          case 16: {
            TimeLockDelay = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendToRouteRequest : pb::IMessage<SendToRouteRequest> {
    private static readonly pb::MessageParser<SendToRouteRequest> _parser = new pb::MessageParser<SendToRouteRequest>(() => new SendToRouteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToRouteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteRequest(SendToRouteRequest other) : this() {
      paymentHash_ = other.paymentHash_;
      route_ = other.route_ != null ? other.route_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteRequest Clone() {
      return new SendToRouteRequest(this);
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 1;
    private pb::ByteString paymentHash_ = pb::ByteString.Empty;
    /// <summary>
    //// The payment hash to use for the HTLC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 2;
    private global::Lnrpc.Route route_;
    /// <summary>
    //// Route that should be used to attempt to complete the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Route Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToRouteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToRouteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaymentHash != other.PaymentHash) return false;
      if (!object.Equals(Route, other.Route)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (route_ != null) hash ^= Route.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PaymentHash);
      }
      if (route_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Route);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentHash);
      }
      if (route_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToRouteRequest other) {
      if (other == null) {
        return;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      if (other.route_ != null) {
        if (route_ == null) {
          Route = new global::Lnrpc.Route();
        }
        Route.MergeFrom(other.Route);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PaymentHash = input.ReadBytes();
            break;
          }
          case 18: {
            if (route_ == null) {
              Route = new global::Lnrpc.Route();
            }
            input.ReadMessage(Route);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendToRouteResponse : pb::IMessage<SendToRouteResponse> {
    private static readonly pb::MessageParser<SendToRouteResponse> _parser = new pb::MessageParser<SendToRouteResponse>(() => new SendToRouteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToRouteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteResponse(SendToRouteResponse other) : this() {
      preimage_ = other.preimage_;
      failure_ = other.failure_ != null ? other.failure_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteResponse Clone() {
      return new SendToRouteResponse(this);
    }

    /// <summary>Field number for the "preimage" field.</summary>
    public const int PreimageFieldNumber = 1;
    private pb::ByteString preimage_ = pb::ByteString.Empty;
    /// <summary>
    //// The preimage obtained by making the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Preimage {
      get { return preimage_; }
      set {
        preimage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "failure" field.</summary>
    public const int FailureFieldNumber = 2;
    private global::Lnrpc.Failure failure_;
    /// <summary>
    //// The failure message in case the payment failed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Failure Failure {
      get { return failure_; }
      set {
        failure_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToRouteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToRouteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Preimage != other.Preimage) return false;
      if (!object.Equals(Failure, other.Failure)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Preimage.Length != 0) hash ^= Preimage.GetHashCode();
      if (failure_ != null) hash ^= Failure.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Preimage.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Preimage);
      }
      if (failure_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Failure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Preimage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Preimage);
      }
      if (failure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Failure);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToRouteResponse other) {
      if (other == null) {
        return;
      }
      if (other.Preimage.Length != 0) {
        Preimage = other.Preimage;
      }
      if (other.failure_ != null) {
        if (failure_ == null) {
          Failure = new global::Lnrpc.Failure();
        }
        Failure.MergeFrom(other.Failure);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Preimage = input.ReadBytes();
            break;
          }
          case 18: {
            if (failure_ == null) {
              Failure = new global::Lnrpc.Failure();
            }
            input.ReadMessage(Failure);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResetMissionControlRequest : pb::IMessage<ResetMissionControlRequest> {
    private static readonly pb::MessageParser<ResetMissionControlRequest> _parser = new pb::MessageParser<ResetMissionControlRequest>(() => new ResetMissionControlRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetMissionControlRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetMissionControlRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetMissionControlRequest(ResetMissionControlRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetMissionControlRequest Clone() {
      return new ResetMissionControlRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetMissionControlRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetMissionControlRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetMissionControlRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ResetMissionControlResponse : pb::IMessage<ResetMissionControlResponse> {
    private static readonly pb::MessageParser<ResetMissionControlResponse> _parser = new pb::MessageParser<ResetMissionControlResponse>(() => new ResetMissionControlResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetMissionControlResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetMissionControlResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetMissionControlResponse(ResetMissionControlResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetMissionControlResponse Clone() {
      return new ResetMissionControlResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetMissionControlResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetMissionControlResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetMissionControlResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class QueryMissionControlRequest : pb::IMessage<QueryMissionControlRequest> {
    private static readonly pb::MessageParser<QueryMissionControlRequest> _parser = new pb::MessageParser<QueryMissionControlRequest>(() => new QueryMissionControlRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryMissionControlRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryMissionControlRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryMissionControlRequest(QueryMissionControlRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryMissionControlRequest Clone() {
      return new QueryMissionControlRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryMissionControlRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryMissionControlRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryMissionControlRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  //// QueryMissionControlResponse contains mission control state.
  /// </summary>
  public sealed partial class QueryMissionControlResponse : pb::IMessage<QueryMissionControlResponse> {
    private static readonly pb::MessageParser<QueryMissionControlResponse> _parser = new pb::MessageParser<QueryMissionControlResponse>(() => new QueryMissionControlResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryMissionControlResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryMissionControlResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryMissionControlResponse(QueryMissionControlResponse other) : this() {
      pairs_ = other.pairs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryMissionControlResponse Clone() {
      return new QueryMissionControlResponse(this);
    }

    /// <summary>Field number for the "pairs" field.</summary>
    public const int PairsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Routerrpc.PairHistory> _repeated_pairs_codec
        = pb::FieldCodec.ForMessage(18, global::Routerrpc.PairHistory.Parser);
    private readonly pbc::RepeatedField<global::Routerrpc.PairHistory> pairs_ = new pbc::RepeatedField<global::Routerrpc.PairHistory>();
    /// <summary>
    //// Node pair-level mission control state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Routerrpc.PairHistory> Pairs {
      get { return pairs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryMissionControlResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryMissionControlResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pairs_.Equals(other.pairs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pairs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pairs_.WriteTo(output, _repeated_pairs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pairs_.CalculateSize(_repeated_pairs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryMissionControlResponse other) {
      if (other == null) {
        return;
      }
      pairs_.Add(other.pairs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            pairs_.AddEntriesFrom(input, _repeated_pairs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// PairHistory contains the mission control state for a particular node pair.
  /// </summary>
  public sealed partial class PairHistory : pb::IMessage<PairHistory> {
    private static readonly pb::MessageParser<PairHistory> _parser = new pb::MessageParser<PairHistory>(() => new PairHistory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PairHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairHistory(PairHistory other) : this() {
      nodeFrom_ = other.nodeFrom_;
      nodeTo_ = other.nodeTo_;
      history_ = other.history_ != null ? other.history_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairHistory Clone() {
      return new PairHistory(this);
    }

    /// <summary>Field number for the "node_from" field.</summary>
    public const int NodeFromFieldNumber = 1;
    private pb::ByteString nodeFrom_ = pb::ByteString.Empty;
    /// <summary>
    //// The source node pubkey of the pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NodeFrom {
      get { return nodeFrom_; }
      set {
        nodeFrom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_to" field.</summary>
    public const int NodeToFieldNumber = 2;
    private pb::ByteString nodeTo_ = pb::ByteString.Empty;
    /// <summary>
    //// The destination node pubkey of the pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NodeTo {
      get { return nodeTo_; }
      set {
        nodeTo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "history" field.</summary>
    public const int HistoryFieldNumber = 7;
    private global::Routerrpc.PairData history_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.PairData History {
      get { return history_; }
      set {
        history_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PairHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PairHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeFrom != other.NodeFrom) return false;
      if (NodeTo != other.NodeTo) return false;
      if (!object.Equals(History, other.History)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeFrom.Length != 0) hash ^= NodeFrom.GetHashCode();
      if (NodeTo.Length != 0) hash ^= NodeTo.GetHashCode();
      if (history_ != null) hash ^= History.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeFrom.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(NodeFrom);
      }
      if (NodeTo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NodeTo);
      }
      if (history_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(History);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeFrom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NodeFrom);
      }
      if (NodeTo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NodeTo);
      }
      if (history_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(History);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PairHistory other) {
      if (other == null) {
        return;
      }
      if (other.NodeFrom.Length != 0) {
        NodeFrom = other.NodeFrom;
      }
      if (other.NodeTo.Length != 0) {
        NodeTo = other.NodeTo;
      }
      if (other.history_ != null) {
        if (history_ == null) {
          History = new global::Routerrpc.PairData();
        }
        History.MergeFrom(other.History);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeFrom = input.ReadBytes();
            break;
          }
          case 18: {
            NodeTo = input.ReadBytes();
            break;
          }
          case 58: {
            if (history_ == null) {
              History = new global::Routerrpc.PairData();
            }
            input.ReadMessage(History);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PairData : pb::IMessage<PairData> {
    private static readonly pb::MessageParser<PairData> _parser = new pb::MessageParser<PairData>(() => new PairData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PairData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairData(PairData other) : this() {
      failTime_ = other.failTime_;
      failAmtSat_ = other.failAmtSat_;
      failAmtMsat_ = other.failAmtMsat_;
      successTime_ = other.successTime_;
      successAmtSat_ = other.successAmtSat_;
      successAmtMsat_ = other.successAmtMsat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairData Clone() {
      return new PairData(this);
    }

    /// <summary>Field number for the "fail_time" field.</summary>
    public const int FailTimeFieldNumber = 1;
    private long failTime_;
    /// <summary>
    //// Time of last failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FailTime {
      get { return failTime_; }
      set {
        failTime_ = value;
      }
    }

    /// <summary>Field number for the "fail_amt_sat" field.</summary>
    public const int FailAmtSatFieldNumber = 2;
    private long failAmtSat_;
    /// <summary>
    ///*
    ///Lowest amount that failed to forward rounded to whole sats. This may be
    ///set to zero if the failure is independent of amount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FailAmtSat {
      get { return failAmtSat_; }
      set {
        failAmtSat_ = value;
      }
    }

    /// <summary>Field number for the "fail_amt_msat" field.</summary>
    public const int FailAmtMsatFieldNumber = 4;
    private long failAmtMsat_;
    /// <summary>
    ///*
    ///Lowest amount that failed to forward in millisats. This may be
    ///set to zero if the failure is independent of amount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FailAmtMsat {
      get { return failAmtMsat_; }
      set {
        failAmtMsat_ = value;
      }
    }

    /// <summary>Field number for the "success_time" field.</summary>
    public const int SuccessTimeFieldNumber = 5;
    private long successTime_;
    /// <summary>
    //// Time of last success.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SuccessTime {
      get { return successTime_; }
      set {
        successTime_ = value;
      }
    }

    /// <summary>Field number for the "success_amt_sat" field.</summary>
    public const int SuccessAmtSatFieldNumber = 6;
    private long successAmtSat_;
    /// <summary>
    //// Highest amount that we could successfully forward rounded to whole sats.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SuccessAmtSat {
      get { return successAmtSat_; }
      set {
        successAmtSat_ = value;
      }
    }

    /// <summary>Field number for the "success_amt_msat" field.</summary>
    public const int SuccessAmtMsatFieldNumber = 7;
    private long successAmtMsat_;
    /// <summary>
    //// Highest amount that we could successfully forward in millisats.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SuccessAmtMsat {
      get { return successAmtMsat_; }
      set {
        successAmtMsat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PairData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PairData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FailTime != other.FailTime) return false;
      if (FailAmtSat != other.FailAmtSat) return false;
      if (FailAmtMsat != other.FailAmtMsat) return false;
      if (SuccessTime != other.SuccessTime) return false;
      if (SuccessAmtSat != other.SuccessAmtSat) return false;
      if (SuccessAmtMsat != other.SuccessAmtMsat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FailTime != 0L) hash ^= FailTime.GetHashCode();
      if (FailAmtSat != 0L) hash ^= FailAmtSat.GetHashCode();
      if (FailAmtMsat != 0L) hash ^= FailAmtMsat.GetHashCode();
      if (SuccessTime != 0L) hash ^= SuccessTime.GetHashCode();
      if (SuccessAmtSat != 0L) hash ^= SuccessAmtSat.GetHashCode();
      if (SuccessAmtMsat != 0L) hash ^= SuccessAmtMsat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FailTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FailTime);
      }
      if (FailAmtSat != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(FailAmtSat);
      }
      if (FailAmtMsat != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FailAmtMsat);
      }
      if (SuccessTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SuccessTime);
      }
      if (SuccessAmtSat != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SuccessAmtSat);
      }
      if (SuccessAmtMsat != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(SuccessAmtMsat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FailTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FailTime);
      }
      if (FailAmtSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FailAmtSat);
      }
      if (FailAmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FailAmtMsat);
      }
      if (SuccessTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SuccessTime);
      }
      if (SuccessAmtSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SuccessAmtSat);
      }
      if (SuccessAmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SuccessAmtMsat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PairData other) {
      if (other == null) {
        return;
      }
      if (other.FailTime != 0L) {
        FailTime = other.FailTime;
      }
      if (other.FailAmtSat != 0L) {
        FailAmtSat = other.FailAmtSat;
      }
      if (other.FailAmtMsat != 0L) {
        FailAmtMsat = other.FailAmtMsat;
      }
      if (other.SuccessTime != 0L) {
        SuccessTime = other.SuccessTime;
      }
      if (other.SuccessAmtSat != 0L) {
        SuccessAmtSat = other.SuccessAmtSat;
      }
      if (other.SuccessAmtMsat != 0L) {
        SuccessAmtMsat = other.SuccessAmtMsat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FailTime = input.ReadInt64();
            break;
          }
          case 16: {
            FailAmtSat = input.ReadInt64();
            break;
          }
          case 32: {
            FailAmtMsat = input.ReadInt64();
            break;
          }
          case 40: {
            SuccessTime = input.ReadInt64();
            break;
          }
          case 48: {
            SuccessAmtSat = input.ReadInt64();
            break;
          }
          case 56: {
            SuccessAmtMsat = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryProbabilityRequest : pb::IMessage<QueryProbabilityRequest> {
    private static readonly pb::MessageParser<QueryProbabilityRequest> _parser = new pb::MessageParser<QueryProbabilityRequest>(() => new QueryProbabilityRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryProbabilityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryProbabilityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryProbabilityRequest(QueryProbabilityRequest other) : this() {
      fromNode_ = other.fromNode_;
      toNode_ = other.toNode_;
      amtMsat_ = other.amtMsat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryProbabilityRequest Clone() {
      return new QueryProbabilityRequest(this);
    }

    /// <summary>Field number for the "from_node" field.</summary>
    public const int FromNodeFieldNumber = 1;
    private pb::ByteString fromNode_ = pb::ByteString.Empty;
    /// <summary>
    //// The source node pubkey of the pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FromNode {
      get { return fromNode_; }
      set {
        fromNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to_node" field.</summary>
    public const int ToNodeFieldNumber = 2;
    private pb::ByteString toNode_ = pb::ByteString.Empty;
    /// <summary>
    //// The destination node pubkey of the pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ToNode {
      get { return toNode_; }
      set {
        toNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amt_msat" field.</summary>
    public const int AmtMsatFieldNumber = 3;
    private long amtMsat_;
    /// <summary>
    //// The amount for which to calculate a probability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtMsat {
      get { return amtMsat_; }
      set {
        amtMsat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryProbabilityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryProbabilityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromNode != other.FromNode) return false;
      if (ToNode != other.ToNode) return false;
      if (AmtMsat != other.AmtMsat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromNode.Length != 0) hash ^= FromNode.GetHashCode();
      if (ToNode.Length != 0) hash ^= ToNode.GetHashCode();
      if (AmtMsat != 0L) hash ^= AmtMsat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromNode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(FromNode);
      }
      if (ToNode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ToNode);
      }
      if (AmtMsat != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmtMsat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FromNode);
      }
      if (ToNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ToNode);
      }
      if (AmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtMsat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryProbabilityRequest other) {
      if (other == null) {
        return;
      }
      if (other.FromNode.Length != 0) {
        FromNode = other.FromNode;
      }
      if (other.ToNode.Length != 0) {
        ToNode = other.ToNode;
      }
      if (other.AmtMsat != 0L) {
        AmtMsat = other.AmtMsat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FromNode = input.ReadBytes();
            break;
          }
          case 18: {
            ToNode = input.ReadBytes();
            break;
          }
          case 24: {
            AmtMsat = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryProbabilityResponse : pb::IMessage<QueryProbabilityResponse> {
    private static readonly pb::MessageParser<QueryProbabilityResponse> _parser = new pb::MessageParser<QueryProbabilityResponse>(() => new QueryProbabilityResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryProbabilityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryProbabilityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryProbabilityResponse(QueryProbabilityResponse other) : this() {
      probability_ = other.probability_;
      history_ = other.history_ != null ? other.history_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryProbabilityResponse Clone() {
      return new QueryProbabilityResponse(this);
    }

    /// <summary>Field number for the "probability" field.</summary>
    public const int ProbabilityFieldNumber = 1;
    private double probability_;
    /// <summary>
    //// The success probability for the requested pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Probability {
      get { return probability_; }
      set {
        probability_ = value;
      }
    }

    /// <summary>Field number for the "history" field.</summary>
    public const int HistoryFieldNumber = 2;
    private global::Routerrpc.PairData history_;
    /// <summary>
    //// The historical data for the requested pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.PairData History {
      get { return history_; }
      set {
        history_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryProbabilityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryProbabilityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Probability, other.Probability)) return false;
      if (!object.Equals(History, other.History)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Probability != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Probability);
      if (history_ != null) hash ^= History.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Probability != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Probability);
      }
      if (history_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(History);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Probability != 0D) {
        size += 1 + 8;
      }
      if (history_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(History);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryProbabilityResponse other) {
      if (other == null) {
        return;
      }
      if (other.Probability != 0D) {
        Probability = other.Probability;
      }
      if (other.history_ != null) {
        if (history_ == null) {
          History = new global::Routerrpc.PairData();
        }
        History.MergeFrom(other.History);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Probability = input.ReadDouble();
            break;
          }
          case 18: {
            if (history_ == null) {
              History = new global::Routerrpc.PairData();
            }
            input.ReadMessage(History);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildRouteRequest : pb::IMessage<BuildRouteRequest> {
    private static readonly pb::MessageParser<BuildRouteRequest> _parser = new pb::MessageParser<BuildRouteRequest>(() => new BuildRouteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildRouteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildRouteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildRouteRequest(BuildRouteRequest other) : this() {
      amtMsat_ = other.amtMsat_;
      finalCltvDelta_ = other.finalCltvDelta_;
      outgoingChanId_ = other.outgoingChanId_;
      hopPubkeys_ = other.hopPubkeys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildRouteRequest Clone() {
      return new BuildRouteRequest(this);
    }

    /// <summary>Field number for the "amt_msat" field.</summary>
    public const int AmtMsatFieldNumber = 1;
    private long amtMsat_;
    /// <summary>
    ///*
    ///The amount to send expressed in msat. If set to zero, the minimum routable
    ///amount is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtMsat {
      get { return amtMsat_; }
      set {
        amtMsat_ = value;
      }
    }

    /// <summary>Field number for the "final_cltv_delta" field.</summary>
    public const int FinalCltvDeltaFieldNumber = 2;
    private int finalCltvDelta_;
    /// <summary>
    ///*
    ///CLTV delta from the current height that should be used for the timelock
    ///of the final hop
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalCltvDelta {
      get { return finalCltvDelta_; }
      set {
        finalCltvDelta_ = value;
      }
    }

    /// <summary>Field number for the "outgoing_chan_id" field.</summary>
    public const int OutgoingChanIdFieldNumber = 3;
    private ulong outgoingChanId_;
    /// <summary>
    ///*
    ///The channel id of the channel that must be taken to the first hop. If zero,
    ///any channel may be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutgoingChanId {
      get { return outgoingChanId_; }
      set {
        outgoingChanId_ = value;
      }
    }

    /// <summary>Field number for the "hop_pubkeys" field.</summary>
    public const int HopPubkeysFieldNumber = 4;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_hopPubkeys_codec
        = pb::FieldCodec.ForBytes(34);
    private readonly pbc::RepeatedField<pb::ByteString> hopPubkeys_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///*
    ///A list of hops that defines the route. This does not include the source hop
    ///pubkey.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> HopPubkeys {
      get { return hopPubkeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildRouteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildRouteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AmtMsat != other.AmtMsat) return false;
      if (FinalCltvDelta != other.FinalCltvDelta) return false;
      if (OutgoingChanId != other.OutgoingChanId) return false;
      if(!hopPubkeys_.Equals(other.hopPubkeys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AmtMsat != 0L) hash ^= AmtMsat.GetHashCode();
      if (FinalCltvDelta != 0) hash ^= FinalCltvDelta.GetHashCode();
      if (OutgoingChanId != 0UL) hash ^= OutgoingChanId.GetHashCode();
      hash ^= hopPubkeys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AmtMsat != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AmtMsat);
      }
      if (FinalCltvDelta != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FinalCltvDelta);
      }
      if (OutgoingChanId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(OutgoingChanId);
      }
      hopPubkeys_.WriteTo(output, _repeated_hopPubkeys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtMsat);
      }
      if (FinalCltvDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalCltvDelta);
      }
      if (OutgoingChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutgoingChanId);
      }
      size += hopPubkeys_.CalculateSize(_repeated_hopPubkeys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildRouteRequest other) {
      if (other == null) {
        return;
      }
      if (other.AmtMsat != 0L) {
        AmtMsat = other.AmtMsat;
      }
      if (other.FinalCltvDelta != 0) {
        FinalCltvDelta = other.FinalCltvDelta;
      }
      if (other.OutgoingChanId != 0UL) {
        OutgoingChanId = other.OutgoingChanId;
      }
      hopPubkeys_.Add(other.hopPubkeys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AmtMsat = input.ReadInt64();
            break;
          }
          case 16: {
            FinalCltvDelta = input.ReadInt32();
            break;
          }
          case 24: {
            OutgoingChanId = input.ReadUInt64();
            break;
          }
          case 34: {
            hopPubkeys_.AddEntriesFrom(input, _repeated_hopPubkeys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildRouteResponse : pb::IMessage<BuildRouteResponse> {
    private static readonly pb::MessageParser<BuildRouteResponse> _parser = new pb::MessageParser<BuildRouteResponse>(() => new BuildRouteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildRouteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildRouteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildRouteResponse(BuildRouteResponse other) : this() {
      route_ = other.route_ != null ? other.route_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildRouteResponse Clone() {
      return new BuildRouteResponse(this);
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 1;
    private global::Lnrpc.Route route_;
    /// <summary>
    ///*
    ///Fully specified route that can be used to execute the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Route Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildRouteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildRouteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Route, other.Route)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (route_ != null) hash ^= Route.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (route_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Route);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (route_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildRouteResponse other) {
      if (other == null) {
        return;
      }
      if (other.route_ != null) {
        if (route_ == null) {
          Route = new global::Lnrpc.Route();
        }
        Route.MergeFrom(other.Route);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (route_ == null) {
              Route = new global::Lnrpc.Route();
            }
            input.ReadMessage(Route);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscribeHtlcEventsRequest : pb::IMessage<SubscribeHtlcEventsRequest> {
    private static readonly pb::MessageParser<SubscribeHtlcEventsRequest> _parser = new pb::MessageParser<SubscribeHtlcEventsRequest>(() => new SubscribeHtlcEventsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeHtlcEventsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeHtlcEventsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeHtlcEventsRequest(SubscribeHtlcEventsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeHtlcEventsRequest Clone() {
      return new SubscribeHtlcEventsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeHtlcEventsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeHtlcEventsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeHtlcEventsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  ///HtlcEvent contains the htlc event that was processed. These are served on a
  ///best-effort basis; events are not persisted, delivery is not guaranteed
  ///(in the event of a crash in the switch, forward events may be lost) and
  ///some events may be replayed upon restart. Events consumed from this package
  ///should be de-duplicated by the htlc's unique combination of incoming and
  ///outgoing channel id and htlc id. [EXPERIMENTAL]
  /// </summary>
  public sealed partial class HtlcEvent : pb::IMessage<HtlcEvent> {
    private static readonly pb::MessageParser<HtlcEvent> _parser = new pb::MessageParser<HtlcEvent>(() => new HtlcEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HtlcEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HtlcEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HtlcEvent(HtlcEvent other) : this() {
      incomingChannelId_ = other.incomingChannelId_;
      outgoingChannelId_ = other.outgoingChannelId_;
      incomingHtlcId_ = other.incomingHtlcId_;
      outgoingHtlcId_ = other.outgoingHtlcId_;
      timestampNs_ = other.timestampNs_;
      eventType_ = other.eventType_;
      switch (other.EventCase) {
        case EventOneofCase.ForwardEvent:
          ForwardEvent = other.ForwardEvent.Clone();
          break;
        case EventOneofCase.ForwardFailEvent:
          ForwardFailEvent = other.ForwardFailEvent.Clone();
          break;
        case EventOneofCase.SettleEvent:
          SettleEvent = other.SettleEvent.Clone();
          break;
        case EventOneofCase.LinkFailEvent:
          LinkFailEvent = other.LinkFailEvent.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HtlcEvent Clone() {
      return new HtlcEvent(this);
    }

    /// <summary>Field number for the "incoming_channel_id" field.</summary>
    public const int IncomingChannelIdFieldNumber = 1;
    private ulong incomingChannelId_;
    /// <summary>
    ///*
    ///The short channel id that the incoming htlc arrived at our node on. This
    ///value is zero for sends.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IncomingChannelId {
      get { return incomingChannelId_; }
      set {
        incomingChannelId_ = value;
      }
    }

    /// <summary>Field number for the "outgoing_channel_id" field.</summary>
    public const int OutgoingChannelIdFieldNumber = 2;
    private ulong outgoingChannelId_;
    /// <summary>
    ///*
    ///The short channel id that the outgoing htlc left our node on. This value
    ///is zero for receives.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutgoingChannelId {
      get { return outgoingChannelId_; }
      set {
        outgoingChannelId_ = value;
      }
    }

    /// <summary>Field number for the "incoming_htlc_id" field.</summary>
    public const int IncomingHtlcIdFieldNumber = 3;
    private ulong incomingHtlcId_;
    /// <summary>
    ///*
    ///Incoming id is the index of the incoming htlc in the incoming channel.
    ///This value is zero for sends.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IncomingHtlcId {
      get { return incomingHtlcId_; }
      set {
        incomingHtlcId_ = value;
      }
    }

    /// <summary>Field number for the "outgoing_htlc_id" field.</summary>
    public const int OutgoingHtlcIdFieldNumber = 4;
    private ulong outgoingHtlcId_;
    /// <summary>
    ///*
    ///Outgoing id is the index of the outgoing htlc in the outgoing channel.
    ///This value is zero for receives.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutgoingHtlcId {
      get { return outgoingHtlcId_; }
      set {
        outgoingHtlcId_ = value;
      }
    }

    /// <summary>Field number for the "timestamp_ns" field.</summary>
    public const int TimestampNsFieldNumber = 5;
    private ulong timestampNs_;
    /// <summary>
    ///*
    ///The time in unix nanoseconds that the event occurred.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimestampNs {
      get { return timestampNs_; }
      set {
        timestampNs_ = value;
      }
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 6;
    private global::Routerrpc.HtlcEvent.Types.EventType eventType_ = 0;
    /// <summary>
    ///*
    ///The event type indicates whether the htlc was part of a send, receive or
    ///forward.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.HtlcEvent.Types.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "forward_event" field.</summary>
    public const int ForwardEventFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.ForwardEvent ForwardEvent {
      get { return eventCase_ == EventOneofCase.ForwardEvent ? (global::Routerrpc.ForwardEvent) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.ForwardEvent;
      }
    }

    /// <summary>Field number for the "forward_fail_event" field.</summary>
    public const int ForwardFailEventFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.ForwardFailEvent ForwardFailEvent {
      get { return eventCase_ == EventOneofCase.ForwardFailEvent ? (global::Routerrpc.ForwardFailEvent) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.ForwardFailEvent;
      }
    }

    /// <summary>Field number for the "settle_event" field.</summary>
    public const int SettleEventFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.SettleEvent SettleEvent {
      get { return eventCase_ == EventOneofCase.SettleEvent ? (global::Routerrpc.SettleEvent) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.SettleEvent;
      }
    }

    /// <summary>Field number for the "link_fail_event" field.</summary>
    public const int LinkFailEventFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.LinkFailEvent LinkFailEvent {
      get { return eventCase_ == EventOneofCase.LinkFailEvent ? (global::Routerrpc.LinkFailEvent) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.LinkFailEvent;
      }
    }

    private object event_;
    /// <summary>Enum of possible cases for the "event" oneof.</summary>
    public enum EventOneofCase {
      None = 0,
      ForwardEvent = 7,
      ForwardFailEvent = 8,
      SettleEvent = 9,
      LinkFailEvent = 10,
    }
    private EventOneofCase eventCase_ = EventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventOneofCase EventCase {
      get { return eventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvent() {
      eventCase_ = EventOneofCase.None;
      event_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HtlcEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HtlcEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IncomingChannelId != other.IncomingChannelId) return false;
      if (OutgoingChannelId != other.OutgoingChannelId) return false;
      if (IncomingHtlcId != other.IncomingHtlcId) return false;
      if (OutgoingHtlcId != other.OutgoingHtlcId) return false;
      if (TimestampNs != other.TimestampNs) return false;
      if (EventType != other.EventType) return false;
      if (!object.Equals(ForwardEvent, other.ForwardEvent)) return false;
      if (!object.Equals(ForwardFailEvent, other.ForwardFailEvent)) return false;
      if (!object.Equals(SettleEvent, other.SettleEvent)) return false;
      if (!object.Equals(LinkFailEvent, other.LinkFailEvent)) return false;
      if (EventCase != other.EventCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IncomingChannelId != 0UL) hash ^= IncomingChannelId.GetHashCode();
      if (OutgoingChannelId != 0UL) hash ^= OutgoingChannelId.GetHashCode();
      if (IncomingHtlcId != 0UL) hash ^= IncomingHtlcId.GetHashCode();
      if (OutgoingHtlcId != 0UL) hash ^= OutgoingHtlcId.GetHashCode();
      if (TimestampNs != 0UL) hash ^= TimestampNs.GetHashCode();
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (eventCase_ == EventOneofCase.ForwardEvent) hash ^= ForwardEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.ForwardFailEvent) hash ^= ForwardFailEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.SettleEvent) hash ^= SettleEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.LinkFailEvent) hash ^= LinkFailEvent.GetHashCode();
      hash ^= (int) eventCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IncomingChannelId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(IncomingChannelId);
      }
      if (OutgoingChannelId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(OutgoingChannelId);
      }
      if (IncomingHtlcId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(IncomingHtlcId);
      }
      if (OutgoingHtlcId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(OutgoingHtlcId);
      }
      if (TimestampNs != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TimestampNs);
      }
      if (EventType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) EventType);
      }
      if (eventCase_ == EventOneofCase.ForwardEvent) {
        output.WriteRawTag(58);
        output.WriteMessage(ForwardEvent);
      }
      if (eventCase_ == EventOneofCase.ForwardFailEvent) {
        output.WriteRawTag(66);
        output.WriteMessage(ForwardFailEvent);
      }
      if (eventCase_ == EventOneofCase.SettleEvent) {
        output.WriteRawTag(74);
        output.WriteMessage(SettleEvent);
      }
      if (eventCase_ == EventOneofCase.LinkFailEvent) {
        output.WriteRawTag(82);
        output.WriteMessage(LinkFailEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IncomingChannelId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IncomingChannelId);
      }
      if (OutgoingChannelId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutgoingChannelId);
      }
      if (IncomingHtlcId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IncomingHtlcId);
      }
      if (OutgoingHtlcId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutgoingHtlcId);
      }
      if (TimestampNs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimestampNs);
      }
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (eventCase_ == EventOneofCase.ForwardEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ForwardEvent);
      }
      if (eventCase_ == EventOneofCase.ForwardFailEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ForwardFailEvent);
      }
      if (eventCase_ == EventOneofCase.SettleEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SettleEvent);
      }
      if (eventCase_ == EventOneofCase.LinkFailEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkFailEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HtlcEvent other) {
      if (other == null) {
        return;
      }
      if (other.IncomingChannelId != 0UL) {
        IncomingChannelId = other.IncomingChannelId;
      }
      if (other.OutgoingChannelId != 0UL) {
        OutgoingChannelId = other.OutgoingChannelId;
      }
      if (other.IncomingHtlcId != 0UL) {
        IncomingHtlcId = other.IncomingHtlcId;
      }
      if (other.OutgoingHtlcId != 0UL) {
        OutgoingHtlcId = other.OutgoingHtlcId;
      }
      if (other.TimestampNs != 0UL) {
        TimestampNs = other.TimestampNs;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      switch (other.EventCase) {
        case EventOneofCase.ForwardEvent:
          if (ForwardEvent == null) {
            ForwardEvent = new global::Routerrpc.ForwardEvent();
          }
          ForwardEvent.MergeFrom(other.ForwardEvent);
          break;
        case EventOneofCase.ForwardFailEvent:
          if (ForwardFailEvent == null) {
            ForwardFailEvent = new global::Routerrpc.ForwardFailEvent();
          }
          ForwardFailEvent.MergeFrom(other.ForwardFailEvent);
          break;
        case EventOneofCase.SettleEvent:
          if (SettleEvent == null) {
            SettleEvent = new global::Routerrpc.SettleEvent();
          }
          SettleEvent.MergeFrom(other.SettleEvent);
          break;
        case EventOneofCase.LinkFailEvent:
          if (LinkFailEvent == null) {
            LinkFailEvent = new global::Routerrpc.LinkFailEvent();
          }
          LinkFailEvent.MergeFrom(other.LinkFailEvent);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IncomingChannelId = input.ReadUInt64();
            break;
          }
          case 16: {
            OutgoingChannelId = input.ReadUInt64();
            break;
          }
          case 24: {
            IncomingHtlcId = input.ReadUInt64();
            break;
          }
          case 32: {
            OutgoingHtlcId = input.ReadUInt64();
            break;
          }
          case 40: {
            TimestampNs = input.ReadUInt64();
            break;
          }
          case 48: {
            EventType = (global::Routerrpc.HtlcEvent.Types.EventType) input.ReadEnum();
            break;
          }
          case 58: {
            global::Routerrpc.ForwardEvent subBuilder = new global::Routerrpc.ForwardEvent();
            if (eventCase_ == EventOneofCase.ForwardEvent) {
              subBuilder.MergeFrom(ForwardEvent);
            }
            input.ReadMessage(subBuilder);
            ForwardEvent = subBuilder;
            break;
          }
          case 66: {
            global::Routerrpc.ForwardFailEvent subBuilder = new global::Routerrpc.ForwardFailEvent();
            if (eventCase_ == EventOneofCase.ForwardFailEvent) {
              subBuilder.MergeFrom(ForwardFailEvent);
            }
            input.ReadMessage(subBuilder);
            ForwardFailEvent = subBuilder;
            break;
          }
          case 74: {
            global::Routerrpc.SettleEvent subBuilder = new global::Routerrpc.SettleEvent();
            if (eventCase_ == EventOneofCase.SettleEvent) {
              subBuilder.MergeFrom(SettleEvent);
            }
            input.ReadMessage(subBuilder);
            SettleEvent = subBuilder;
            break;
          }
          case 82: {
            global::Routerrpc.LinkFailEvent subBuilder = new global::Routerrpc.LinkFailEvent();
            if (eventCase_ == EventOneofCase.LinkFailEvent) {
              subBuilder.MergeFrom(LinkFailEvent);
            }
            input.ReadMessage(subBuilder);
            LinkFailEvent = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HtlcEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EventType {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("SEND")] Send = 1,
        [pbr::OriginalName("RECEIVE")] Receive = 2,
        [pbr::OriginalName("FORWARD")] Forward = 3,
      }

    }
    #endregion

  }

  public sealed partial class HtlcInfo : pb::IMessage<HtlcInfo> {
    private static readonly pb::MessageParser<HtlcInfo> _parser = new pb::MessageParser<HtlcInfo>(() => new HtlcInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HtlcInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HtlcInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HtlcInfo(HtlcInfo other) : this() {
      incomingTimelock_ = other.incomingTimelock_;
      outgoingTimelock_ = other.outgoingTimelock_;
      incomingAmtMsat_ = other.incomingAmtMsat_;
      outgoingAmtMsat_ = other.outgoingAmtMsat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HtlcInfo Clone() {
      return new HtlcInfo(this);
    }

    /// <summary>Field number for the "incoming_timelock" field.</summary>
    public const int IncomingTimelockFieldNumber = 1;
    private uint incomingTimelock_;
    /// <summary>
    /// The timelock on the incoming htlc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IncomingTimelock {
      get { return incomingTimelock_; }
      set {
        incomingTimelock_ = value;
      }
    }

    /// <summary>Field number for the "outgoing_timelock" field.</summary>
    public const int OutgoingTimelockFieldNumber = 2;
    private uint outgoingTimelock_;
    /// <summary>
    /// The timelock on the outgoing htlc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OutgoingTimelock {
      get { return outgoingTimelock_; }
      set {
        outgoingTimelock_ = value;
      }
    }

    /// <summary>Field number for the "incoming_amt_msat" field.</summary>
    public const int IncomingAmtMsatFieldNumber = 3;
    private ulong incomingAmtMsat_;
    /// <summary>
    /// The amount of the incoming htlc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IncomingAmtMsat {
      get { return incomingAmtMsat_; }
      set {
        incomingAmtMsat_ = value;
      }
    }

    /// <summary>Field number for the "outgoing_amt_msat" field.</summary>
    public const int OutgoingAmtMsatFieldNumber = 4;
    private ulong outgoingAmtMsat_;
    /// <summary>
    /// The amount of the outgoing htlc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutgoingAmtMsat {
      get { return outgoingAmtMsat_; }
      set {
        outgoingAmtMsat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HtlcInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HtlcInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IncomingTimelock != other.IncomingTimelock) return false;
      if (OutgoingTimelock != other.OutgoingTimelock) return false;
      if (IncomingAmtMsat != other.IncomingAmtMsat) return false;
      if (OutgoingAmtMsat != other.OutgoingAmtMsat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IncomingTimelock != 0) hash ^= IncomingTimelock.GetHashCode();
      if (OutgoingTimelock != 0) hash ^= OutgoingTimelock.GetHashCode();
      if (IncomingAmtMsat != 0UL) hash ^= IncomingAmtMsat.GetHashCode();
      if (OutgoingAmtMsat != 0UL) hash ^= OutgoingAmtMsat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IncomingTimelock != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(IncomingTimelock);
      }
      if (OutgoingTimelock != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OutgoingTimelock);
      }
      if (IncomingAmtMsat != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(IncomingAmtMsat);
      }
      if (OutgoingAmtMsat != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(OutgoingAmtMsat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IncomingTimelock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IncomingTimelock);
      }
      if (OutgoingTimelock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutgoingTimelock);
      }
      if (IncomingAmtMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IncomingAmtMsat);
      }
      if (OutgoingAmtMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutgoingAmtMsat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HtlcInfo other) {
      if (other == null) {
        return;
      }
      if (other.IncomingTimelock != 0) {
        IncomingTimelock = other.IncomingTimelock;
      }
      if (other.OutgoingTimelock != 0) {
        OutgoingTimelock = other.OutgoingTimelock;
      }
      if (other.IncomingAmtMsat != 0UL) {
        IncomingAmtMsat = other.IncomingAmtMsat;
      }
      if (other.OutgoingAmtMsat != 0UL) {
        OutgoingAmtMsat = other.OutgoingAmtMsat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IncomingTimelock = input.ReadUInt32();
            break;
          }
          case 16: {
            OutgoingTimelock = input.ReadUInt32();
            break;
          }
          case 24: {
            IncomingAmtMsat = input.ReadUInt64();
            break;
          }
          case 32: {
            OutgoingAmtMsat = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ForwardEvent : pb::IMessage<ForwardEvent> {
    private static readonly pb::MessageParser<ForwardEvent> _parser = new pb::MessageParser<ForwardEvent>(() => new ForwardEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForwardEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardEvent(ForwardEvent other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardEvent Clone() {
      return new ForwardEvent(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Routerrpc.HtlcInfo info_;
    /// <summary>
    /// Info contains details about the htlc that was forwarded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.HtlcInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForwardEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForwardEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForwardEvent other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Routerrpc.HtlcInfo();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::Routerrpc.HtlcInfo();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ForwardFailEvent : pb::IMessage<ForwardFailEvent> {
    private static readonly pb::MessageParser<ForwardFailEvent> _parser = new pb::MessageParser<ForwardFailEvent>(() => new ForwardFailEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForwardFailEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardFailEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardFailEvent(ForwardFailEvent other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardFailEvent Clone() {
      return new ForwardFailEvent(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForwardFailEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForwardFailEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForwardFailEvent other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class SettleEvent : pb::IMessage<SettleEvent> {
    private static readonly pb::MessageParser<SettleEvent> _parser = new pb::MessageParser<SettleEvent>(() => new SettleEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SettleEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettleEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettleEvent(SettleEvent other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettleEvent Clone() {
      return new SettleEvent(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SettleEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SettleEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SettleEvent other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class LinkFailEvent : pb::IMessage<LinkFailEvent> {
    private static readonly pb::MessageParser<LinkFailEvent> _parser = new pb::MessageParser<LinkFailEvent>(() => new LinkFailEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinkFailEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkFailEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkFailEvent(LinkFailEvent other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      wireFailure_ = other.wireFailure_;
      failureDetail_ = other.failureDetail_;
      failureString_ = other.failureString_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkFailEvent Clone() {
      return new LinkFailEvent(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Routerrpc.HtlcInfo info_;
    /// <summary>
    /// Info contains details about the htlc that we failed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.HtlcInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "wire_failure" field.</summary>
    public const int WireFailureFieldNumber = 2;
    private global::Lnrpc.Failure.Types.FailureCode wireFailure_ = 0;
    /// <summary>
    /// FailureCode is the BOLT error code for the failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Failure.Types.FailureCode WireFailure {
      get { return wireFailure_; }
      set {
        wireFailure_ = value;
      }
    }

    /// <summary>Field number for the "failure_detail" field.</summary>
    public const int FailureDetailFieldNumber = 3;
    private global::Routerrpc.FailureDetail failureDetail_ = 0;
    /// <summary>
    ///*
    ///FailureDetail provides additional information about the reason for the
    ///failure. This detail enriches the information provided by the wire message
    ///and may be 'no detail' if the wire message requires no additional metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.FailureDetail FailureDetail {
      get { return failureDetail_; }
      set {
        failureDetail_ = value;
      }
    }

    /// <summary>Field number for the "failure_string" field.</summary>
    public const int FailureStringFieldNumber = 4;
    private string failureString_ = "";
    /// <summary>
    /// A string representation of the link failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FailureString {
      get { return failureString_; }
      set {
        failureString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LinkFailEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LinkFailEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      if (WireFailure != other.WireFailure) return false;
      if (FailureDetail != other.FailureDetail) return false;
      if (FailureString != other.FailureString) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (WireFailure != 0) hash ^= WireFailure.GetHashCode();
      if (FailureDetail != 0) hash ^= FailureDetail.GetHashCode();
      if (FailureString.Length != 0) hash ^= FailureString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (WireFailure != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) WireFailure);
      }
      if (FailureDetail != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) FailureDetail);
      }
      if (FailureString.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FailureString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (WireFailure != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WireFailure);
      }
      if (FailureDetail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailureDetail);
      }
      if (FailureString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FailureString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LinkFailEvent other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Routerrpc.HtlcInfo();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.WireFailure != 0) {
        WireFailure = other.WireFailure;
      }
      if (other.FailureDetail != 0) {
        FailureDetail = other.FailureDetail;
      }
      if (other.FailureString.Length != 0) {
        FailureString = other.FailureString;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::Routerrpc.HtlcInfo();
            }
            input.ReadMessage(Info);
            break;
          }
          case 16: {
            WireFailure = (global::Lnrpc.Failure.Types.FailureCode) input.ReadEnum();
            break;
          }
          case 24: {
            FailureDetail = (global::Routerrpc.FailureDetail) input.ReadEnum();
            break;
          }
          case 34: {
            FailureString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PaymentStatus : pb::IMessage<PaymentStatus> {
    private static readonly pb::MessageParser<PaymentStatus> _parser = new pb::MessageParser<PaymentStatus>(() => new PaymentStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaymentStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentStatus(PaymentStatus other) : this() {
      state_ = other.state_;
      preimage_ = other.preimage_;
      htlcs_ = other.htlcs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentStatus Clone() {
      return new PaymentStatus(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Routerrpc.PaymentState state_ = 0;
    /// <summary>
    //// Current state the payment is in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.PaymentState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "preimage" field.</summary>
    public const int PreimageFieldNumber = 2;
    private pb::ByteString preimage_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The pre-image of the payment when state is SUCCEEDED.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Preimage {
      get { return preimage_; }
      set {
        preimage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "htlcs" field.</summary>
    public const int HtlcsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Lnrpc.HTLCAttempt> _repeated_htlcs_codec
        = pb::FieldCodec.ForMessage(34, global::Lnrpc.HTLCAttempt.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.HTLCAttempt> htlcs_ = new pbc::RepeatedField<global::Lnrpc.HTLCAttempt>();
    /// <summary>
    ///*
    ///The HTLCs made in attempt to settle the payment [EXPERIMENTAL].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.HTLCAttempt> Htlcs {
      get { return htlcs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaymentStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaymentStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (Preimage != other.Preimage) return false;
      if(!htlcs_.Equals(other.htlcs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (Preimage.Length != 0) hash ^= Preimage.GetHashCode();
      hash ^= htlcs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (Preimage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Preimage);
      }
      htlcs_.WriteTo(output, _repeated_htlcs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Preimage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Preimage);
      }
      size += htlcs_.CalculateSize(_repeated_htlcs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaymentStatus other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Preimage.Length != 0) {
        Preimage = other.Preimage;
      }
      htlcs_.Add(other.htlcs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::Routerrpc.PaymentState) input.ReadEnum();
            break;
          }
          case 18: {
            Preimage = input.ReadBytes();
            break;
          }
          case 34: {
            htlcs_.AddEntriesFrom(input, _repeated_htlcs_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
